//#  (c) 2009 Microsoft Corporation
//#
//#  Title:                  Microsoft-Windows-microsoft-windows-virtualization-drivers-vmswitch-common
//#
//#  Details:                
//#
//#  Public References:      microsoft-windows-virtualization-drivers-vmswitch-common.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/30/2015
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsHyperVVmSwitch, "{67DC0D66-3695-47c0-9642-33F76F7BD7AD}")]
Protocol VMSWITCH_MicrosoftWindowsHyperVVmSwitch = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] VMSWITCH_VM_CONFIG_STORE_ROOT_OPEN_FAILED VM_CONFIG_STORE_ROOT_OPEN_FAILED;
		case 2: [property.ETLSummary = this.ToString] VMSWITCH_VM_INVALID_SWITCH_NAME_IN_CONFIG_STORE VM_INVALID_SWITCH_NAME_IN_CONFIG_STORE;
		case 3: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_REGISTER_CONTROL_DEVICE VM_FAILED_TO_REGISTER_CONTROL_DEVICE;
		case 4: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_INITIALIZE VM_FAILED_TO_INITIALIZE;
		case 5: [property.ETLSummary = this.ToString] VMSWITCH_VM_MINIPORT_SUCCESSFULLY_ENABLED VM_MINIPORT_SUCCESSFULLY_ENABLED;
		case 6: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_ENABLE_MINIPORT_NIC VM_FAILED_TO_ENABLE_MINIPORT_NIC;
		case 7: [property.ETLSummary = this.ToString] VMSWITCH_VM_MINIPORT_SUCCESSFULLY_INITIALIZED VM_MINIPORT_SUCCESSFULLY_INITIALIZED;
		case 8: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_INITIALIZE_MINIPORT_NIC VM_FAILED_TO_INITIALIZE_MINIPORT_NIC;
		case 9: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_SUCCESSFULLY_INITIALIZED VM_SWITCH_SUCCESSFULLY_INITIALIZED;
		case 10: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_INITIALIZE_SWITCH VM_FAILED_TO_INITIALIZE_SWITCH;
		case 11: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_SWITCH VM_FAILED_TO_STORE_CONFIG_FOR_SWITCH;
		case 12: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_SWITCHPORT VM_FAILED_TO_STORE_CONFIG_FOR_SWITCHPORT;
		case 13: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_NIC VM_FAILED_TO_STORE_CONFIG_FOR_NIC;
		case 14: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCH VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCH;
		case 15: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCHPORT VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCHPORT;
		case 16: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_NIC VM_FAILED_TO_RESTORE_CONFIG_FOR_NIC;
		case 17: [property.ETLSummary = this.ToString] VMSWITCH_VM_PROTOCOL_BIND_SUCCEEDED VM_PROTOCOL_BIND_SUCCEEDED;
		case 18: [property.ETLSummary = this.ToString] VMSWITCH_VM_PROTOCOL_BIND_FAILED VM_PROTOCOL_BIND_FAILED;
		case 19: [property.ETLSummary = this.ToString] VMSWITCH_VM_PROTOCOL_UNBIND_SUCCEEDED VM_PROTOCOL_UNBIND_SUCCEEDED;
		case 20: [property.ETLSummary = this.ToString] VMSWITCH_VM_PROTOCOL_UNBIND_FAILED VM_PROTOCOL_UNBIND_FAILED;
		case 21: [property.ETLSummary = this.ToString] VMSWITCH_VM_MEDIA_CONNECTED VM_MEDIA_CONNECTED;
		case 22: [property.ETLSummary = this.ToString] VMSWITCH_VM_MEDIA_DISCONNECTED VM_MEDIA_DISCONNECTED;
		case 23: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_OPERATIONAL VM_NIC_OPERATIONAL;
		case 24: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_NON_OPERATIONAL VM_NIC_NON_OPERATIONAL;
		case 25: [property.ETLSummary = this.ToString] VMSWITCH_VM_MAC_ADDRESS_RELEARNED VM_MAC_ADDRESS_RELEARNED;
		case 26: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_PROTOCOL_VERSION_MISMATCH VM_NIC_PROTOCOL_VERSION_MISMATCH;
		case 28: [property.ETLSummary = this.ToString] VMSWITCH_VM_MAC_ADDRESS_RELEARN_PREVENTED VM_MAC_ADDRESS_RELEARN_PREVENTED;
		case 29: [property.ETLSummary = this.ToString] VMSWITCH_VM_MAC_INVALID_CONFIGURED_MAC_ADDRESS VM_MAC_INVALID_CONFIGURED_MAC_ADDRESS;
		case 30: [property.ETLSummary = this.ToString] VMSWITCH_VM_MAC_ADDRESS_CONFIG_PREVENTED VM_MAC_ADDRESS_CONFIG_PREVENTED;
		case 31: [property.ETLSummary = this.ToString] VMSWITCH_VM_MAC_ADDRESS_CONFIG_OVERRIDDEN VM_MAC_ADDRESS_CONFIG_OVERRIDDEN;
		case 32: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_CONNECT_FAILED VM_NIC_CONNECT_FAILED;
		case 33: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_IP_SPOOF_PKT_DROPPED VM_PORT_IP_SPOOF_PKT_DROPPED;
		case 34: [property.ETLSummary = this.ToString] VMSWITCH_VM_CREATE_PORT_FAILED_EXTENSIBILITY VM_CREATE_PORT_FAILED_EXTENSIBILITY;
		case 35: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_CONNECT_FAILED_EXTENSIBILITY VM_NIC_CONNECT_FAILED_EXTENSIBILITY;
		case 36: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_ACL_PKT_DROPPED VM_PORT_ACL_PKT_DROPPED;
		case 37: [property.ETLSummary = this.ToString] VMSWITCH_VM_IPSEC_OFFLOAD_INBOUND_DROPPED VM_IPSEC_OFFLOAD_INBOUND_DROPPED;
		case 38: [property.ETLSummary = this.ToString] VMSWITCH_VM_IGNORE_IPSEC_OFFLOAD_CRYPTO_FAILURE_INBOUND VM_IGNORE_IPSEC_OFFLOAD_CRYPTO_FAILURE_INBOUND;
		case 39: [property.ETLSummary = this.ToString] VMSWITCH_VM_IPSEC_OFFLOAD_OUTBOUND_DROPPED VM_IPSEC_OFFLOAD_OUTBOUND_DROPPED;
		case 40: [property.ETLSummary = this.ToString] VMSWITCH_VM_IPSEC_SA_OFFLOAD_FAILURE VM_IPSEC_SA_OFFLOAD_FAILURE;
		case 41: [property.ETLSummary = this.ToString] VMSWITCH_VM_FAILED_SWITCH_EXTENSION_QUERY VM_FAILED_SWITCH_EXTENSION_QUERY;
		case 42: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_FORWARDING_DISABLED VM_SWITCH_FORWARDING_DISABLED;
		case 43: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_FORWARDING_ENABLED VM_SWITCH_FORWARDING_ENABLED;
		case 44: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_PROC_AFFINITY_CHANGE VM_VMQ_PROC_AFFINITY_CHANGE;
		case 45: [property.ETLSummary = this.ToString] VMSWITCH_VM_IPSEC_OFFLOAD_MUTIPLE_DESTINATION_DROPPED VM_IPSEC_OFFLOAD_MUTIPLE_DESTINATION_DROPPED;
		case 46: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VLAN_TRUNK_NOT_SUPPORTED VM_PORT_VLAN_TRUNK_NOT_SUPPORTED;
		case 47: [property.ETLSummary = this.ToString] VMSWITCH_VM_FLOW_CONTROL_INTERVAL VM_FLOW_CONTROL_INTERVAL;
		case 48: [property.ETLSummary = this.ToString] VMSWITCH_VM_LINE_CONTROL_INTERVAL VM_LINE_CONTROL_INTERVAL;
		case 49: [property.ETLSummary = this.ToString] VMSWITCH_VM_FLOW_CONFORMANCE VM_FLOW_CONFORMANCE;
		case 50: [property.ETLSummary = this.ToString] VMSWITCH_VM_FLOW_SEND_QUEUE VM_FLOW_SEND_QUEUE;
		case 51: [property.ETLSummary = this.ToString] VMSWITCH_VM_TIMER VM_TIMER;
		case 52: [property.ETLSummary = this.ToString] VMSWITCH_VM_LINE_BUFFER_SAMPLE VM_LINE_BUFFER_SAMPLE;
		case 53: [property.ETLSummary = this.ToString] VMSWITCH_VM_QOS_PACKET_DROP VM_QOS_PACKET_DROP;
		case 54: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_INCOMING_DROP VM_NBL_INCOMING_DROP;
		case 55: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_OUTGOING_DROP VM_NBL_OUTGOING_DROP;
		case 56: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_RECEIVE VM_NBL_RECEIVE;
		case 57: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_ROUTE VM_NBL_ROUTE;
		case 58: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_DELIVER VM_NBL_DELIVER;
		case 59: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_VETO_DELIVERY VM_NBL_VETO_DELIVERY;
		case 60: [property.ETLSummary = this.ToString] VMSWITCH_VM_NBL_EXTENSION_DROP VM_NBL_EXTENSION_DROP;
		case 61: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_RESTORE_PROPERTY_NOT_HANDLED VM_NIC_RESTORE_PROPERTY_NOT_HANDLED;
		case 62: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_SUCCESSFULLY_DELETED VM_SWITCH_SUCCESSFULLY_DELETED;
		case 63: [property.ETLSummary = this.ToString] VMSWITCH_VM_DELETE_SWITCH_FAILED VM_DELETE_SWITCH_FAILED;
		case 64: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_INFO_SET VM_SWITCH_INFO_SET;
		case 65: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_INFO_SET_FAILED VM_SWITCH_INFO_SET_FAILED;
		case 66: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_DELETE_COMPLETE VM_SWITCH_DELETE_COMPLETE;
		case 67: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_CREATED VM_PORT_CREATED;
		case 68: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_CREATE_FAILED VM_PORT_CREATE_FAILED;
		case 69: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SUCCESSFULLY_DELETED VM_PORT_SUCCESSFULLY_DELETED;
		case 70: [property.ETLSummary = this.ToString] VMSWITCH_VM_DELETE_PORT_FAILED VM_DELETE_PORT_FAILED;
		case 71: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_DELETE_COMPLETE VM_PORT_DELETE_COMPLETE;
		case 72: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SET_MONITOR_MODE_FAILED VM_PORT_SET_MONITOR_MODE_FAILED;
		case 73: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SET_VLAN_INFO_FAILED VM_PORT_SET_VLAN_INFO_FAILED;
		case 74: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SET_IP_SPOOFING_INFO_FAILED VM_PORT_SET_IP_SPOOFING_INFO_FAILED;
		case 75: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_OPERATION_FAILED VM_PORT_OPERATION_FAILED;
		case 76: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_OPERATION_FAILED VM_NIC_OPERATION_FAILED;
		case 77: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_DISCONNECT_FAILED VM_NIC_DISCONNECT_FAILED;
		case 78: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_POLICY_FAILED_SYSTEM VM_PORT_POLICY_FAILED_SYSTEM;
		case 79: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_POLICY_SUCCESS VM_PORT_POLICY_SUCCESS;
		case 80: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_POLICY_FAILED VM_SWITCH_POLICY_FAILED;
		case 81: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_POLICY_SUCCESS VM_SWITCH_POLICY_SUCCESS;
		case 82: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_BANDWIDTH_POLICY_FAILED VM_PORT_BANDWIDTH_POLICY_FAILED;
		case 83: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_BANDWIDTH_POLICY_SUCCESS VM_PORT_BANDWIDTH_POLICY_SUCCESS;
		case 84: [property.ETLSummary = this.ToString] VMSWITCH_VM_DEFAULT_FLOW_FAILURE VM_DEFAULT_FLOW_FAILURE;
		case 85: [property.ETLSummary = this.ToString] VMSWITCH_VM_DEFAULT_FLOW_SUCCESS VM_DEFAULT_FLOW_SUCCESS;
		case 86: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_POLICY_FAILED_DEBUG VM_PORT_POLICY_FAILED_DEBUG;
		case 87: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VLAN_PTNIC_NOT_SUPPORTED VM_PORT_VLAN_PTNIC_NOT_SUPPORTED;
		case 88: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SECURITY_POLICY_FAILED VM_PORT_SECURITY_POLICY_FAILED;
		case 89: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_SECURITY_POLICY_SUCCESS VM_PORT_SECURITY_POLICY_SUCCESS;
		case 90: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_ACL_POLICY_FAILED VM_PORT_ACL_POLICY_FAILED;
		case 91: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_ACL_POLICY_SUCCESS VM_PORT_ACL_POLICY_SUCCESS;
		case 92: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_POLICY_FAILED_EXTENSION VM_PORT_POLICY_FAILED_EXTENSION;
		case 93: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_POLICY_FAILED_EXTENSION VM_SWITCH_POLICY_FAILED_EXTENSION;
		case 94: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_OFFLOAD_POLICY_FAILED VM_PORT_OFFLOAD_POLICY_FAILED;
		case 95: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VALIDATE_VLAN_INFO_FAILED VM_PORT_VALIDATE_VLAN_INFO_FAILED;
		case 96: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VLAN_EXTNIC_NOT_ENABLED VM_PORT_VLAN_EXTNIC_NOT_ENABLED;
		case 97: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_GET_EXTENSIONS_FAILURE VM_SWITCH_GET_EXTENSIONS_FAILURE;
		case 98: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_NIC_EXTENSION_REQUIREMENTS_NOT_MET VM_SWITCH_NIC_EXTENSION_REQUIREMENTS_NOT_MET;
		case 99: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_NIC_EXTENSION_REQUIREMENT_MISSING VM_SWITCH_NIC_EXTENSION_REQUIREMENT_MISSING;
		case 100: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_BANDWIDTH_POLICY_FAILED VM_SWITCH_BANDWIDTH_POLICY_FAILED;
		case 101: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_BANDWIDTH_POLICY_SUCCESS VM_SWITCH_BANDWIDTH_POLICY_SUCCESS;
		case 102: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_PROTOCOL_VERSION_NEGOTIATION_SUCCESS VM_NIC_PROTOCOL_VERSION_NEGOTIATION_SUCCESS;
		case 103: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_POLICY_FAILED_DEBUG VM_SWITCH_POLICY_FAILED_DEBUG;
		case 104: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_OPERATION_FAILED_DEBUG VM_NIC_OPERATION_FAILED_DEBUG;
		case 105: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_OPERATION_FAILED_DEBUG VM_PORT_OPERATION_FAILED_DEBUG;
		case 106: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_GROUP_PROCESSOR_SET_INVALID VM_VMQ_GROUP_PROCESSOR_SET_INVALID;
		case 107: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_OID_FORWARD VM_SWITCH_OID_FORWARD;
		case 108: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_OID_FORWARD_RESULT VM_SWITCH_OID_FORWARD_RESULT;
		case 109: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_OID_NIC_REQ_FORWARD VM_SWITCH_OID_NIC_REQ_FORWARD;
		case 110: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_OID_NIC_REQ_FORWARD_RESULT VM_SWITCH_OID_NIC_REQ_FORWARD_RESULT;
		case 111: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_STATUS_FORWARD VM_SWITCH_STATUS_FORWARD;
		case 112: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_STATUS_NIC_STATUS_FORWARD VM_SWITCH_STATUS_NIC_STATUS_FORWARD;
		case 113: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_ALLOCATION_FAILED VM_VMQ_ALLOCATION_FAILED;
		case 114: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_ALLOCATION_FAILED_DEBUG VM_VMQ_ALLOCATION_FAILED_DEBUG;
		case 115: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_ALLOCATION_SUCCESS VM_VMQ_ALLOCATION_SUCCESS;
		case 116: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_TEAM_MEMBER_CONNECT VM_NIC_TEAM_MEMBER_CONNECT;
		case 117: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_TEAM_MEMBER_DISCONNECT VM_NIC_TEAM_MEMBER_DISCONNECT;
		case 118: [property.ETLSummary = this.ToString] VMSWITCH_VM_NIC_TEAM_CONFIGURATION VM_NIC_TEAM_CONFIGURATION;
		case 119: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_IOV_MAC_SPOOFING_NOT_SUPPORTED VM_PORT_IOV_MAC_SPOOFING_NOT_SUPPORTED;
		case 120: [property.ETLSummary = this.ToString] VMSWITCH_VM_BANDWIDTH_RESERVATION_FAILURE VM_BANDWIDTH_RESERVATION_FAILURE;
		case 121: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_IOV_EXTENSION_REVOKE_VF VM_PORT_IOV_EXTENSION_REVOKE_VF;
		case 122: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_GROUP_CREATE_FAILED VM_VMQ_GROUP_CREATE_FAILED;
		case 123: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_CAPS VM_VMQ_CAPS;
		case 124: [property.ETLSummary = this.ToString] VMSWITCH_VM_MINIPORT_RESTART VM_MINIPORT_RESTART;
		case 125: [property.ETLSummary = this.ToString] VMSWITCH_VM_MINIPORT_CONNECTED VM_MINIPORT_CONNECTED;
		case 126: [property.ETLSummary = this.ToString] VMSWITCH_VM_MINIPORT_DISCONNECTED VM_MINIPORT_DISCONNECTED;
		case 127: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_DELETE_ISOLATION_FAILED VM_PORT_DELETE_ISOLATION_FAILED;
		case 128: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VALIDATE_ISOLATION_FAILED VM_PORT_VALIDATE_ISOLATION_FAILED;
		case 129: [property.ETLSummary = this.ToString] VMSWITCH_VM_PORT_VALIDATE_ROUTING_DOMAIN_FAILED VM_PORT_VALIDATE_ROUTING_DOMAIN_FAILED;
		case 130: [property.ETLSummary = this.ToString] VMSWITCH_VM_EXTENDED_PORT_ACL_POLICY_FAILED VM_EXTENDED_PORT_ACL_POLICY_FAILED;
		case 131: [property.ETLSummary = this.ToString] VMSWITCH_VM_EXTENDED_PORT_ACL_PKT_DROPPED VM_EXTENDED_PORT_ACL_PKT_DROPPED;
		case 132: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_EXT_ACTIVATE_FAILED VM_SWITCH_EXT_ACTIVATE_FAILED;
		case 133: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_CANDIDATE_RSS_QUEUE VM_RSS_CANDIDATE_RSS_QUEUE;
		case 134: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_CANDIDATE_VMQ_QUEUE VM_RSS_CANDIDATE_VMQ_QUEUE;
		case 135: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_PROC_EXCEED_UPPER_THRESHOLD VM_RSS_PROC_EXCEED_UPPER_THRESHOLD;
		case 136: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_ADJUSTED_LOAD VM_RSS_ADJUSTED_LOAD;
		case 137: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_PERSPECTIVE_LOAD VM_RSS_PERSPECTIVE_LOAD;
		case 138: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_ADJUSTED_LOAD VM_VMQ_ADJUSTED_LOAD;
		case 139: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_PERSPECTIVE_LOAD VM_VMQ_PERSPECTIVE_LOAD;
		case 140: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_PROC_AFFINITY_CHANGE VM_RSS_PROC_AFFINITY_CHANGE;
		case 141: [property.ETLSummary = this.ToString] VMSWITCH_VM_VMQ_RSS_QUEUE_GROUP_ACTION VM_VMQ_RSS_QUEUE_GROUP_ACTION;
		case 142: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_UPDATE_FAILED VM_RSS_UPDATE_FAILED;
		case 143: [property.ETLSummary = this.ToString] VMSWITCH_VM_RSS_UPDATE_SUCCESS VM_RSS_UPDATE_SUCCESS;
		case 144: [property.ETLSummary = this.ToString] VMSWITCH_VM_VERIFIER_FAILURE VM_VERIFIER_FAILURE;
		case 145: [property.ETLSummary = this.ToString] VMSWITCH_VM_POLICY_FAILED VM_POLICY_FAILED;
		case 146: [property.ETLSummary = this.ToString] VMSWITCH_VM_OPEN_NDK_ADAPTER_FAILED VM_OPEN_NDK_ADAPTER_FAILED;
		case 147: [property.ETLSummary = this.ToString] VMSWITCH_VM_CLOSE_NDK_ADAPTER_FAILED VM_CLOSE_NDK_ADAPTER_FAILED;
		case 148: [property.ETLSummary = this.ToString] VMSWITCH_VM_NDK_OID VM_NDK_OID;
		case 149: [property.ETLSummary = this.ToString] VMSWITCH_VM_NDK_PNP VM_NDK_PNP;
		case 150: [property.ETLSummary = this.ToString] VMSWITCH_VM_NDK_REQUEST_RDMA_FAILURE VM_NDK_REQUEST_RDMA_FAILURE;
		case 151: [property.ETLSummary = this.ToString] VMSWITCH_VM_NDK_UPDATE_VPORT_FAILURE VM_NDK_UPDATE_VPORT_FAILURE;
		case 152: [property.ETLSummary = this.ToString] VMSWITCH_ReplacingMemberInfo ReplacingMemberInfo;
		case 153: [property.ETLSummary = this.ToString] VMSWITCH_ExcludingMemberInfo ExcludingMemberInfo;
		case 154: [property.ETLSummary = this.ToString] VMSWITCH_UsingMemberInfo UsingMemberInfo;
		case 155: [property.ETLSummary = this.ToString] VMSWITCH_StartingConnectTimerInfo StartingConnectTimerInfo;
		case 156: [property.ETLSummary = this.ToString] VMSWITCH_StoppingToUseMemberInfo StoppingToUseMemberInfo;
		case 157: [property.ETLSummary = this.ToString] VMSWITCH_PrimingSwitchInfo PrimingSwitchInfo;
		case 158: [property.ETLSummary = this.ToString] VMSWITCH_FailingSendOnMemberWarn FailingSendOnMemberWarn;
		case 159: [property.ETLSummary = this.ToString] VMSWITCH_FailingSendOnTeamNicWarn FailingSendOnTeamNicWarn;
		case 160: [property.ETLSummary = this.ToString] VMSWITCH_DroppingNBLsOnMemberWarn DroppingNBLsOnMemberWarn;
		case 161: [property.ETLSummary = this.ToString] VMSWITCH_DriverEntryInfo DriverEntryInfo;
		case 162: [property.ETLSummary = this.ToString] VMSWITCH_MemberCreatedInfo MemberCreatedInfo;
		case 163: [property.ETLSummary = this.ToString] VMSWITCH_AggregatorCreatedInfo AggregatorCreatedInfo;
		case 164: [property.ETLSummary = this.ToString] VMSWITCH_MemberTeamedInfo MemberTeamedInfo;
		case 165: [property.ETLSummary = this.ToString] VMSWITCH_TnicLinkStatusIndicationInfo TnicLinkStatusIndicationInfo;
		case 166: [property.ETLSummary = this.ToString] VMSWITCH_TNicDefaultAggChangedInfo TNicDefaultAggChangedInfo;
		case 167: [property.ETLSummary = this.ToString] VMSWITCH_TNicBroadcastRcvrChangedInfo TNicBroadcastRcvrChangedInfo;
		case 168: [property.ETLSummary = this.ToString] VMSWITCH_InitializingTNicInfo InitializingTNicInfo;
		case 169: [property.ETLSummary = this.ToString] VMSWITCH_RemovingAggregatorInfo RemovingAggregatorInfo;
		case 170: [property.ETLSummary = this.ToString] VMSWITCH_MemberUnteamedInfo MemberUnteamedInfo;
		case 171: [property.ETLSummary = this.ToString] VMSWITCH_RemovingTeamNicInfo RemovingTeamNicInfo;
		case 172: [property.ETLSummary = this.ToString] VMSWITCH_DriverUnloadingInfo DriverUnloadingInfo;
		case 173: [property.ETLSummary = this.ToString] VMSWITCH_MemberAggrChangeInfo MemberAggrChangeInfo;
		case 174: [property.ETLSummary = this.ToString] VMSWITCH_LacpInitingInfo LacpInitingInfo;
		case 175: [property.ETLSummary = this.ToString] VMSWITCH_LacpDeinitingInfo LacpDeinitingInfo;
		case 176: [property.ETLSummary = this.ToString] VMSWITCH_ReceivedLACPDUInfo ReceivedLACPDUInfo;
		case 177: [property.ETLSummary = this.ToString] VMSWITCH_LACPRcvMcTransitionInfo LACPRcvMcTransitionInfo;
		case 178: [property.ETLSummary = this.ToString] VMSWITCH_LACPPeriodicTrMcTransitionInfo LACPPeriodicTrMcTransitionInfo;
		case 179: [property.ETLSummary = this.ToString] VMSWITCH_LACPMuxMcTransitionInfo LACPMuxMcTransitionInfo;
		case 180: [property.ETLSummary = this.ToString] VMSWITCH_SendingLACPDUInfo SendingLACPDUInfo;
		case 181: [property.ETLSummary = this.ToString] VMSWITCH_LACPSelectAggrInfo LACPSelectAggrInfo;
		case 182: [property.ETLSummary = this.ToString] VMSWITCH_LACPUnselectAggrInfo LACPUnselectAggrInfo;
		case 183: [property.ETLSummary = this.ToString] VMSWITCH_LACPChurnDetectionInfo LACPChurnDetectionInfo;
		case 184: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_NIC_CONNECTED SYS_EVENT_NIC_CONNECTED;
		case 185: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_NIC_DISCONNECTED SYS_EVENT_NIC_DISCONNECTED;
		case 186: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_NIC_CONNECTION_TIMER_STARTED SYS_EVENT_NIC_CONNECTION_TIMER_STARTED;
		case 187: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_NIC_LACP_CHURN_DETECTED SYS_EVENT_NIC_LACP_CHURN_DETECTED;
		case 188: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_VLAN_ON_NON_DEFAULT_TNIC_DETECTED SYS_EVENT_VLAN_ON_NON_DEFAULT_TNIC_DETECTED;
		case 189: [property.ETLSummary = this.ToString] VMSWITCH_SYS_EVENT_VMS_PORT_MAC_CONFLICT_DETECTED SYS_EVENT_VMS_PORT_MAC_CONFLICT_DETECTED;
		case 190: [property.ETLSummary = this.ToString] VMSWITCH_VM_TEAM_UPDATE_NDIS_QOS_FAILED VM_TEAM_UPDATE_NDIS_QOS_FAILED;
		case 191: [property.ETLSummary = this.ToString] VMSWITCH_VM_TEAM_UPDATE_NDIS_QOS_SUCCEEDED VM_TEAM_UPDATE_NDIS_QOS_SUCCEEDED;
		case 192: [property.ETLSummary = this.ToString] VMSWITCH_VM_TEAM_NDIS_QOS_INCONSISTENT VM_TEAM_NDIS_QOS_INCONSISTENT;
		case 193: [property.ETLSummary = this.ToString] VMSWITCH_VM_TEAM_NDIS_QOS_CONSISTENT VM_TEAM_NDIS_QOS_CONSISTENT;
		case 194: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_SAVE_RESTORE_OPERATION_FAILED VM_SWITCH_SAVE_RESTORE_OPERATION_FAILED;
		case 195: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_FAILED VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_FAILED;
		case 196: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_SUCCEEDED VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_SUCCEEDED;
		case 197: [property.ETLSummary = this.ToString] VMSWITCH_VM_SET_MAC_VLAN_FILTER_FAILED VM_SET_MAC_VLAN_FILTER_FAILED;
		case 198: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_SUCCEEDED VM_SWITCH_NATIVE_RSS_ENABLE_SUCCEEDED;
		case 199: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_FAILED VM_SWITCH_NATIVE_RSS_ENABLE_FAILED;
		case 200: [property.ETLSummary = this.ToString] VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_UNSUPPORTED VM_SWITCH_NATIVE_RSS_ENABLE_UNSUPPORTED;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table VMSWITCH_VMSWITCH_PKT_DROP_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "Invalid Data";
		case 2: "Invalid Packet";
		case 3: "Insufficient Resources";
		case 4: "Adapter not ready";
		case 5: "Media disconnected";
		case 6: "NDIS Not Accepted";
		case 7: "Device busy";
		case 8: "Filtered";
		case 9: "VLAN Filtered";
		case 10: "Unauthorized VLAN";
		case 11: "Unauthorized MAC";
		case 12: "Failed Security Policy";
		case 13: "Failed PVlan Setting";
		case 14: "Qos drop";
		case 15: "IPsec drop";
		case 16: "Spoofed MAC address is not allowed";
		case 17: "Failed DHCP Guard";
		case 18: "Failed Router Guard";
		case 19: "Bridge is not allowed to run inside VM";
		case 20: "Virtual Subnet ID does not match";
		case 21: "An extension that is required for connectivity is missing";
		case 22: "Invalid switch configuration. Creating a vSwitch over another vSwitch is not supported.";
		case 23: "MTU mismatch.";
		case 24: "Native Forwarding Required.";
		case 25: "Invalid Packet: VLAN in Ethernet Header.";
		case 26: "Invalid Packet: NULL Destination MAC.";
		case 27: "Invalid Packet: Invalid Source MAC.";
		case 28: "Invalid Packet: First NB too small.";
		case 29: "Packet Filtered by Windows Network Virtualization.";
		case 30: "Storm limit exceeded.";
		case 31: "ICMP Request injected by switch.";
		case 32: "Failed to update destination list in the packet.";
		case 33: "The destination NIC is disabled.";
		case 34: "Packet does not match the packet filter set on the destination NIC.";
		case 35: "Data flow is disabled on this virtual switch.";
		case 36: "The port's isolation setting does not allow untagged traffic.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_IPSEC_OFFLOAD_INBOUND_PKT_DROP_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "IP, SPI lookup succeeded but port owning inbound SA and destination port mismatched. This may indicate a network attack ";
		case 2: "IP and SPI switch lookup failure. This maybe a transient problem.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_IPSEC_OFFLOAD_SA_FAILURE_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "IPsec offload disabled on Port";
		case 2: "Unsupported IPsec offload feature requested";
		case 3: "Port IPsec  SA offload  quota reached.";
		case 4: "NIC failed SA offload attempt.";
		case 5: "Offloaded SA to talk between co-hosted VMs";
		case 6: "Offloaded SA used to deliver packet to multiple destination ports. e.g. Port Monitoring, Broadcast etc .";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_QOS_DROP_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Non-conformance";
		case 1: "Excessive delay";
		case 2: "Allocation failure";
		case 3: "Cad failure";
		case 4: "Send NBL failure";
		case 5: "Process Queue failure";
		case 6: "Update Flow failure";
		case 7: "Rate match";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_FLOW_CONFORMANCE_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Recompute";
		case 1: "Update";
		case 2: "Set";
		case 3: "PreSend";
		case 4: "PostSend";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_FLOW_SEND_QUEUE_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Idle";
		case 1: "SendRequest";
		case 2: "DelayedSend";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_TIMER_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "TimerSet";
		case 1: "TimerExpired";
		case 2: "TimerStopped";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Enum";
		case 1: "Get Stats";
		case 2: "Get Info";
		case 3: "Set Info";
		case 4: "Enable Optimizations";
		case 5: "Disable Optimizations";
		case 6: "Initialize";
		case 7: "Create";
		case 8: "Delete";
		case 9: "Collect Internal Stats";
		case 10: "Get Internal Stats";
		case 11: "Begin Save";
		case 12: "Continue Save";
		case 13: "End Save";
		case 14: "Pause";
		case 15: "Resume";
		case 16: "Restore";
		case 17: "Set Required Extensions";
		case 18: "Get Required Extensions";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_POLICY_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Policy Add";
		case 1: "Policy Set";
		case 2: "Policy Get";
		case 3: "Policy Delete";
		case 4: "Policy Enum";
		case 5: "Policy Status Get";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_ACL_DIRECTION_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Undefined";
		case 1: "Incoming";
		case 2: "Outgoing";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_ACL_APPLICABILITY_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Undefined";
		case 1: "Local";
		case 2: "Remote";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_ACL_TYPE_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Undefined";
		case 1: "MAC";
		case 2: "IPv4";
		case 3: "IPv6";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_ACL_ACTION_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Undefined";
		case 1: "Allow";
		case 2: "Deny";
		case 3: "Meter";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "Invalid property size";
		case 2: "Invalid switch";
		case 3: "Invalid port or port is pending deletion";
		case 4: "Invalid NIC";
		case 5: "AllowMacSpoofing cannot be changed on the default, the host and the external port";
		case 6: "Failed to update the routing table";
		case 7: "Invalid MonitorSessionId";
		case 8: "Invalid MonitorMode";
		case 9: "The external port cannot be the monitor destination";
		case 10: "Failed to delete VMQ";
		case 11: "Failed to allocate VMQ";
		case 12: "Insufficient Resources";
		case 13: "MAC Metering entries are not allowed";
		case 14: "Invalid ACL type";
		case 15: "Invalid ACL action";
		case 16: "Invalid ACL direction";
		case 17: "Invalid ACL prefix length";
		case 18: "Invalid ACL address size";
		case 19: "Invalid ACL address";
		case 20: "Invalid ACL applicability";
		case 21: "Invalid name string";
		case 22: "Exceeds maximum number of ACL entries";
		case 23: "Port ACL is uninitialized";
		case 24: "Duplicate entry cannot be added";
		case 25: "Failed to insert the ACL entry";
		case 26: "The corresponding ACL entry cannot be found";
		case 27: "An invalid Virtual Subnet Id is specified";
		case 28: "The current VLAN mode set on the port conflicts with VMQ/IOV";
		case 29: "IOV offload weight cannot be zero when VF is allocated";
		case 30: "Invalid interrupt moderation value";
		case 31: "A port cannot have a VirtualSubnetId and VLAN configured at the same time";
		case 32: "VLAN settings cannot be configured on an external port";
		case 33: "PVLAN settings must be zero for this OperationMode";
		case 34: "Non-PVLAN settings must be zero for this OperationMode";
		case 35: "Internal Error";
		case 36: "Access VLAN Id value is out of bounds";
		case 37: "VLAN settings other than Access VLAN Id must be zero";
		case 38: "VLAN settings other than Trunk configuration must be zero";
		case 39: "Native VLAN Id value is out of bounds";
		case 40: "Primary VLAN Id value is out of bounds";
		case 41: "Secondary VLAN Id value is out of bounds";
		case 42: "Secondary VLAN array is not supported in this PVLAN mode";
		case 43: "Primary and Secondary VLAN Id values must not be equal";
		case 44: "Secondary VLAN Id value must be zero in this PVLAN mode";
		case 45: "PVLAN mode is invald";
		case 46: "OperationMode is invalid";
		case 47: "Bandwidth policy cannot be applied to the external NIC";
		case 48: "The switch's bandwidth reservation mode does not support this bandwidth configuration";
		case 49: "Bandwidth reservation value is less than the supported minimum";
		case 50: "Not enough bandwidth is available on this switch to support this reservation";
		case 51: "Bandwidth reservation weight is greater than the maximum weight allowed";
		case 52: "Bandwidth limit specified is greater than the max supported";
		case 53: "Burst limit specified is less than bandwidth limit";
		case 54: "Bandwidth reservation flow update failed";
		case 55: "Bandwidth reservation flow create failed";
		case 56: "Bandwidth limit flow update failed";
		case 57: "Bandwidth limit flow create failed";
		case 58: "TeamName must be '' and TeamNumber must be 0. The values cannot be changed.";
		case 59: "Isolation settings cannot be deleted while Routing Domains are configured on the port";
		case 60: "Isolation settings cannot be set on an external port";
		case 61: "Multi-tenant stack is only supported on Vm NICs";
		case 62: "Isolation settings and VLAN settings cannot be set at the same time";
		case 63: "Isolation settings and VirtualSubnetId settings cannot be set at the same time";
		case 64: "Isolation mode of None does not support changing other default values";
		case 65: "Isolation mode cannot be None when Routing Domains exist";
		case 66: "Isolation mode is out of range";
		case 67: "Isolation ID value is out of the valid range";
		case 68: "Routing Domain GUID string must be a GUID";
		case 69: "Routing Domain Name is too long";
		case 70: "Routing Domain must contain one of more Isolation IDs";
		case 71: "Isolation ID Name list must have equal number of entries as the Isolation ID list";
		case 72: "Routing Domains cannot be added when Isolation Mode is None";
		case 73: "Isolation ID Name is too long";
		case 74: "Another Routing Domain exists with the same Routing Domain GUID";
		case 75: "Another Routing Domain exists with one or more of the Isolation IDs specified";
		case 76: "The port cannot support any more Routing Domains";
		case 77: "IdleSessionTimeout value cannot be specified for stateless Extended ACLs";
		case 78: "Invalid protocol value specified for the Extended ACL";
		case 79: "Invalid port range specified for the Extended ACL";
		case 80: "Stateful extended ACLs can be applied only to TCP / UDP traffic";
		case 81: "Set operation is not supported on this policy.";
		case 82: "Port is pending delete.";
		case 83: "Port profile not found.";
		case 84: "Port Profile ID is invalid.";
		case 85: "Port Profile NetCfg Instance is invalid.";
		case 86: "Port Profile vendor ID is invalid.";
		case 87: "Duplicate port profile.";
		case 88: "This configuration can be specified only on external ports.";
		case 89: "Default NIC Instance for this port is already configured.";
		case 90: "Invalid port profile name.";
		case 91: "Invalid vendor name.";
		case 92: "Invalid PCI Segment Number.";
		case 93: "Invalid PCI Bus Number.";
		case 94: "Invalid PCI device number.";
		case 95: "Invalid PCI function number.";
		case 96: "Routing domain entry not found.";
		case 97: "Invalid property version.";
		case 98: "Multiple instances of this property are not supported.";
		case 99: "Invalid instance ID.";
		case 100: "Unable to revoke VF assigned to the VM.";
		case 101: "An extension failed port policy configuration.";
		case 102: "Bandwidth limit is less than the allowed minimum.";
		case 103: "Bandwidth burst limit is less than the allowed minimum.";
		case 104: "Bandwidth burst size is less than the allowed minimum.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_GET_EXTENSIONS_FAILURE_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "The input buffer is invalid";
		case 2: "Failed reading the switch name";
		case 3: "The specified switch was not found";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_VMQ_PROC_SET_INVALID_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown.";
		case 1: "The processor sets are not identical when LBFO is configured with min-queue mode.";
		case 2: "The processor sets overlap when LBFO is configured with sum-queue mode.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_OID_TARGET_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Forwarding OID to the extension stack";
		case 1: "Handling OID, bypassing extension stack (it was not ready)";
		case 2: "Handling OID, bypassing extension stack (due to normal reboot scenario)";
		case 3: "Forwarding OID to the external port";
		case 4: "Received OID at Switch Extensibility Miniport";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_STATUS_TARGET_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Forwarding status indication to the extension stack";
		case 1: "Handling status indication, bypassing extension stack (it was not ready)";
		case 2: "Handling status indication from extension stack";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_VMQ_FAILED_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "The NIC or the corresponding Protocol NIC is being deleted";
		case 2: "The corresponding Protocol NIC hasn't received the first restart";
		case 3: "The VMQ for this NIC is already allocated";
		case 4: "Optimization is disabled on this NIC or the channel is not established for this NIC yet";
		case 5: "VF is currently assigned for this NIC";
		case 6: "VMQ is not turned on for this NIC";
		case 7: "VMQ conflicts with the MAC Spoofing Prevention setting";
		case 8: "Maximum number of VMQs supported on the Protocol NIC is exceeded";
		case 9: "Memory Allocation failed";
		case 10: "VMQ conflicts with the VLAN setting";
		case 11: "The OID failed";
		case 12: "Failed to add the VMQ to a VMQ group";
		case 13: "Failed to set filters on the VMQ";
		case 14: "VPort creation failed";
		case 15: "Failed to move filters from the default VPort";
		case 16: "VPort activation failed";
		case 17: "Failed to set the VMQ affinity processor for NIC";
		case 18: "Failed to set the send interrupt processor for NIC";
		case 19: "VMQ is not supported on the protocol NIC";
		case 20: "Miniport binding stack is not ready";
		case 21: "VMQ group already exists";
		case 22: "Unsupported IM platform VMQ mode";
		case 23: "Invalid processor configuration on the adapter";
		case 24: "Cannot find the corresponding VMQ group";
		case 25: "Failed to intialize the vRSS settings";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_NIC_TEAM_CONFIGURATION_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "a single NIC, or a non-Microsoft Teaming solution";
		case 1: "a Microsoft Team";
		case 2: "a Switch Team";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_RSS_GROUP_ACTION_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "deactivated";
		case 1: "activated";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_RSS_FAILED_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "Input buffer is too small";
		case 2: "Hash information cannot be updated without resetting the adapter";
		case 3: "Hash key cannot be updated without resetting the adapter";
		case 4: "Invalid size of indirection table";
		case 5: "Hash function not supported";
		case 6: "Hash key size exceeds the limit";
		case 7: "Failed to initialize the hash context";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_VERIFIER_FAILURE_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0x0000A001: "The NBL's source handle is not set";
		case 0x0000A002: "The NBL's forwarding detail is not 0";
		case 0x0000A003: "The NBL is not a valid vSwitch NBL. The Routing context is not initialized.";
		case 0x0000A004: "vSwitch handler is invoked with an invalid Port or with an invalid NIC Index";
		case 0x0000A005: "vSwitch handler is invoked with an invalid destination";
		case 0x0000A006: "vSwitch handler is invoked with an invalid source NIC / source Port";
		case 0x0000A007: "The NBL's DestinationList is invalid";
		case 0x0000A008: "The NIC's reference cannot be incremented in its current state";
		case 0x0000A009: "The port's reference cannot be incremented in its current state";
		case 0x0000A00A: "The extension context on the NBL is already allocated";
		case 0x0000A00B: "vSwitch packet drop handler is invoked with the wrong direction flag";
		case 0x0000A00C: "NDIS_SEND_FLAGS_SWITCH_SINGLE_SOURCE is set when the NBLs in the list are from different sources";
		case 0x0000A00D: "NDIS_RECEIVE_FLAGS_SWITCH_DESTINATION_GROUP is set when the NBLs are destined to different NICs";
		case 0x0000A00E: "WNV is forwarding a non-WNV NBL";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_NDK_ADAPTER_FAILURE_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown.";
		case 1: "Virtual NIC is NULL.";
		case 2: "Virtual NIC is not host vNIC.";
		case 3: "NIC Switch VPort is not allocated for the virtual NIC.";
		case 4: "NIC Switch VPort ID of the virtual NIC is NDIS_DEFAULT_VPORT_ID.";
		case 5: "Requested version of NDK adapter is not supported.";
		case 6: "Non-default NIC Switch VPort ID of is passed.";
		case 7: "NDK Capabilities are not enabled for the virtual NIC.";
		case 8: "External NIC is NULL.";
		case 9: "External NIC extension is NULL.";
		case 10: "External NIC handle is NULL.";
		case 11: "NDIS call to open NDK adapter failed.";
		case 12: "Memory allocation for NDK adapter entry in vSwitch failed.";
		case 13: "NDK adapter is NULL.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_NDK_REQUEST_RDMA_FAILURE_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown.";
		case 1: "One of the parameters was unexpectedly null.";
		case 2: "VPort creation failed.";
		case 3: "Activating VPort failed.";
		case 4: "Update VPort failed.";
		case 5: "Work item null; maybe it is not initialized yet.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_NDK_UPDATE_VPORT_FAILURE_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown.";
		case 1: "One of the parameters was unexpectedly null.";
		case 2: "Nic is not host vNIC.";
		case 3: "VPort is not allocated.";
		case 4: "VPort ID is default.";
		case 5: "NDK params could not be set before issuing the OID_NIC_SWITCH_VPORT_PARAMETERS.";
		case 6: "OID_NIC_SWITCH_VPORT_PARAMETERS failed.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_SAVE_RESTORE_FAILURE_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown error";
		case 1: "Invalid NIC state";
		case 2: "VMBUS is not ready";
		case 3: "NIC is not in paused state";
		case 4: "Nic is in an invalid running state";
		case 5: "VMBUS initial save failed";
		case 6: "Save Buffer was too small";
		case 7: "Adapter save failed";
		case 8: "VMBUS channel save failed";
		case 9: "Unkown Save/Restore state";
		case 10: "Invalid NetVSC state";
		case 11: "Invalid NetVsc protocol version";
		case 12: "Receive buffer restore failed";
		case 13: "Send buffers restore failed";
		case 14: "VMBUS channel allocation failed";
		case 15: "Invalid vRSS queue table count";
		case 16: "vRSS Hash initialization failed";
		case 17: "Out of memory";
		case 18: "Save buffer was too large";
		case 19: "Switch Extension failed";
		case 20: "Adapter restore failed";
		case 21: "VMBUS channel restore failed";
		case 22: "NIC was not connected";
		case 23: "Invalid extensibility header";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_SET_FILTER_FAILED_REASON_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "Unknown reason";
		case 1: "Exceeded limit for filters per port";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table VMSWITCH_VMSWITCH_NATIVE_RSS_FAILURE_VALUEMAP(value)
{
	switch(value)
	{
		case 0: "None";
		case 1: "Out of memory";
		case 2: "NdisGetRssProcessorInformation failed";
		case 3: "NdisGetRssProcessorInformation returned invalid processor info";
		case 4: "The adapter does not support Toeplitz hash";
		case 5: "The adapter does not support any hash type";
		case 6: "The adapter does not support RSS";
		case 7: "OID_GEN_RECEIVE_SCALE_PARAMETERS failed";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct VMSWITCH_VM_CONFIG_STORE_ROOT_OPEN_FAILED = FormatString("Failed to open handle to configuration store root due to error %s", Status.ToString)
{
	NTSTATUS Status;
}
Struct VMSWITCH_VM_INVALID_SWITCH_NAME_IN_CONFIG_STORE = FormatString("Failed to restore switch. The switch name in the configuration store is corrupted.")
{
	NTSTATUS Status;
}
Struct VMSWITCH_VM_FAILED_TO_REGISTER_CONTROL_DEVICE = FormatString("Failed to register the control device object for the switch due to error %s.", Status.ToString)
{
	NTSTATUS Status;
}
Struct VMSWITCH_VM_FAILED_TO_INITIALIZE = FormatString("Failed to initialize VMSwitch driver due to error %s.", Status.ToString)
{
	NTSTATUS Status;
}
Struct VMSWITCH_VM_MINIPORT_SUCCESSFULLY_ENABLED = FormatString("Miniport NIC %s (Friendly Name: %s) successfully enabled", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_FAILED_TO_ENABLE_MINIPORT_NIC = FormatString("Failed to enable miniport NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_MINIPORT_SUCCESSFULLY_INITIALIZED = FormatString("Miniport NIC %s (Friendly Name: %s) successfully initialized.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_FAILED_TO_INITIALIZE_MINIPORT_NIC = FormatString("Failed to initialize miniport NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_SWITCH_SUCCESSFULLY_INITIALIZED = FormatString("Switch %s (Friendly Name: %s) successfully initialized.", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_FAILED_TO_INITIALIZE_SWITCH = FormatString("Failed to initialize switch %s (Friendly Name: %s), status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_SWITCH = FormatString("Failed to update configuration for switch %s (Friendly Name: %s), status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_SWITCHPORT = FormatString("Failed to update configuration for port %s (Friendly Name: %s) on switch %s (Friendly Name: %s), status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_STORE_CONFIG_FOR_NIC = FormatString("Failed to update configuration for NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCH = FormatString("Failed to restore configuration for switch %s (Friendly Name: %s),  status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_SWITCHPORT = FormatString("Failed to restore configuration for port %s (Friendly Name: %s) on switch %s (Friendly Name: %s), status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_FAILED_TO_RESTORE_CONFIG_FOR_NIC = FormatString("Failed to restore configuration for NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PROTOCOL_BIND_SUCCEEDED = FormatString("Protocol NIC %s (Friendly Name: %s) successfully bound to port %s (Friendly Name: %s) on switch %s(Friendly Name: %s).", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PROTOCOL_BIND_FAILED = FormatString("Failed to bind protocol NIC %s (Friendly Name: %s) to port %s (Friendly Name: %s) on switch %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PROTOCOL_UNBIND_SUCCEEDED = FormatString("Protocol NIC %s (Friendly Name: %s) successfully unbound.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_PROTOCOL_UNBIND_FAILED = FormatString("Failed to unbind protocol NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_MEDIA_CONNECTED = FormatString("Media connected on NIC %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MEDIA_DISCONNECTED = FormatString("Media disconnected on NIC %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_NIC_OPERATIONAL = FormatString("NIC %s (Friendly Name: %s) is now operational.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_NIC_NON_OPERATIONAL = FormatString("NIC %s (Friendly Name: %s) is no longer operational.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MAC_ADDRESS_RELEARNED = FormatString("The MAC address %s has moved from port %s (Friendly Name: %s) to port %s (Friendly Name: %s).", MacAddress.ToString, Port1Name.ToString, Port1FName.ToString, Port2Name.ToString, Port2FName.ToString)
{
	UINT32 MacAddressLen;
	UnicodeString(MacAddressLen) MacAddress;
	UINT32 Port1NameLen;
	UnicodeString(Port1NameLen) Port1Name;
	UINT32 Port1FNameLen;
	UnicodeString(Port1FNameLen) Port1FName;
	UINT32 Port2NameLen;
	UnicodeString(Port2NameLen) Port2Name;
	UINT32 Port2FNameLen;
	UnicodeString(Port2FNameLen) Port2FName;
}
Struct VMSWITCH_VM_NIC_PROTOCOL_VERSION_MISMATCH = FormatString("Cannot load networking driver in %s because there is no mutually supported protocol.  Server version %s  Client version %s (Virtual machine ID %s).", VMName.ToString, ServerVersion.ToString, ClientVersion.ToString, VMId.ToString)
{
	UINT32 VMNameLen;
	UnicodeString(VMNameLen) VMName;
	UINT32 VMIdLen;
	UnicodeString(VMIdLen) VMId;
	UINT32 ServerVersionLen;
	UnicodeString(ServerVersionLen) ServerVersion;
	UINT32 ClientVersionLen;
	UnicodeString(ClientVersionLen) ClientVersion;
}
Struct VMSWITCH_VM_MAC_ADDRESS_RELEARN_PREVENTED = FormatString("Port %s (Friendly Name: %s) was prevented from using MAC address %s because it is pinned to port %s (Friendly Name: %s).", Port2Name.ToString, Port2FName.ToString, MacAddress.ToString, Port1Name.ToString, Port1FName.ToString)
{
	UINT32 MacAddressLen;
	UnicodeString(MacAddressLen) MacAddress;
	UINT32 Port1NameLen;
	UnicodeString(Port1NameLen) Port1Name;
	UINT32 Port1FNameLen;
	UnicodeString(Port1FNameLen) Port1FName;
	UINT32 Port2NameLen;
	UnicodeString(Port2NameLen) Port2Name;
	UINT32 Port2FNameLen;
	UnicodeString(Port2FNameLen) Port2FName;
}
Struct VMSWITCH_VM_MAC_INVALID_CONFIGURED_MAC_ADDRESS = FormatString("Invalid mac address %s configured for NIC %s (Friendly Name: %s).", MacAddress.ToString, NicName.ToString, NicFName.ToString)
{
	UINT32 MacAddressLen;
	UnicodeString(MacAddressLen) MacAddress;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MAC_ADDRESS_CONFIG_PREVENTED = FormatString("NIC %s (Friendly Name: %s) was prevented from using MAC address %s because it is connected to a port that does not allow mac spoofing.", NicName.ToString, NicFName.ToString, MacAddress.ToString)
{
	UINT32 MacAddressLen;
	UnicodeString(MacAddressLen) MacAddress;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MAC_ADDRESS_CONFIG_OVERRIDDEN = FormatString("The mac address for NIC %s (Friendly Name: %s) has been overridden by the VM to %s.", NicName.ToString, NicFName.ToString, MacAddress.ToString)
{
	UINT32 MacAddressLen;
	UnicodeString(MacAddressLen) MacAddress;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_NIC_CONNECT_FAILED = FormatString("Failed to connect NIC %s (Friendly Name: %s) to port %s (Friendly Name: %s) on switch %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_IP_SPOOF_PKT_DROPPED = FormatString("One or more packets were dropped on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) because the packet contained spoofed IP address. Connected NIC is %s  (Friendly Name: %s)on VM %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, NicName.ToString, NicFName.ToString, VMName.ToString)
{
	UINT32 VMNameLen;
	UnicodeString(VMNameLen) VMName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_CREATE_PORT_FAILED_EXTENSIBILITY = FormatString("Failed to create port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). The task was vetoed by a switch extension, or the switch extension stack is corrupted. Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_NIC_CONNECT_FAILED_EXTENSIBILITY = FormatString("Failed to connect NIC %s (Friendly Name: %s) to port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). The task was vetoed by a switch extension, or the switch extension stack is corrupted. Status = %s.", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_ACL_PKT_DROPPED = FormatString("A packet was dropped on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) because the packet is filtered by Port ACL entry %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, AclName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 AclNameLen;
	UnicodeString(AclNameLen) AclName;
}
Struct VMSWITCH_VM_IPSEC_OFFLOAD_INBOUND_DROPPED = FormatString("An IPsec offload inbound packet with destination IP %s and SPI %s destined to port %s (Friendly Name: %s);on switch %s (Friendly Name: %s) was dropped. Reason: %s", SwitchName.ToString, SwitchFNameLen.ToString, PortName.ToString, PortFName.ToString, PortFName.ToString, SwitchName.ToString, IpsecOffloadInboundDropReason.ToString)
{
	UINT32 IpsecOffloadInboundDropReason = VMSWITCH_VMSWITCH_IPSEC_OFFLOAD_INBOUND_PKT_DROP_REASON_ValueMap(this);
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 DestAddressLen;
	UnicodeString(DestAddressLen) DestAddress;
	UINT32 SPI;
}
Struct VMSWITCH_VM_IGNORE_IPSEC_OFFLOAD_CRYPTO_FAILURE_INBOUND = FormatString("An IPsec offload inbound packet failed crypto on the NIC. Destination IP address: %s, SPI: %s, port %s (Friendly Name: %s), switch %s (Friendly Name: %s) This may be a DoS attack since the IP and SPI switch lookup succeeded but the SA packet port did not match. Ignoring the crypto failure and letting the packet through.", DestAddress.ToString, SPI.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 DestAddressLen;
	UnicodeString(DestAddressLen) DestAddress;
	UINT32 SPI;
}
Struct VMSWITCH_VM_IPSEC_OFFLOAD_OUTBOUND_DROPPED = FormatString("An IPsec offload outbound packet was dropped. Offload handle: %s, from port %s (Friendly Name: %s) on switch %s (Friendly Name: %s)  The packet did not match any existing offload handle on that port. This may be network attack.", OffloadHandle.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT64 OffloadHandle;
}
Struct VMSWITCH_VM_IPSEC_SA_OFFLOAD_FAILURE = FormatString("An IPsec offload attempt failed. Originating from port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Reason: %s. NDIS Status: %s ", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, IpsecSaOffloadFailureReason.ToString, Status.ToString)
{
	UINT32 IpsecSaOffloadFailureReason = VMSWITCH_VMSWITCH_IPSEC_OFFLOAD_SA_FAILURE_REASON_ValueMap(this);
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	NTSTATUS Status;
}
Struct VMSWITCH_VM_FAILED_SWITCH_EXTENSION_QUERY = FormatString("Failed to query for switch extensions. The switch data path cannot start. Switch %s (Friendly Name: %s), status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_SWITCH_FORWARDING_DISABLED = FormatString("A forwarding extension is enabled on switch %s (Friendly Name: %s). Built-in forwarding capability is disabled", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_FORWARDING_ENABLED = FormatString("A forwarding extension was disabled on switch %s (Friendly Name: %s). Built-in forwarding capability is enabled", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_VMQ_PROC_AFFINITY_CHANGE = FormatString("VMQ %s on switch %s (Friendly Name: %s) was moved from Processor %s to Processor %s.", VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, SourceProcIndex.ToString, DestinationProcIndex.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 SourceProcIndex;
	UINT32 DestinationProcIndex;
}
Struct VMSWITCH_VM_IPSEC_OFFLOAD_MUTIPLE_DESTINATION_DROPPED = FormatString("An IPsec offload packet was dropped because it going to be delivered to multiple destinations. From port %s (Friendly Name: %s) on switch %s  (Friendly Name: %s). The multiple destinations could be because of Port monitoring, Layer 2 Multicast or switch flooding.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_VLAN_TRUNK_NOT_SUPPORTED = FormatString("The connected NIC does not support VLAN trunk mode on switch %s (Friendly Name: %s) port %s (Friendly Name: %s).", SwitchName.ToString, SwitchFName.ToString, PortName.ToString, PortFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
}
Struct VMSWITCH_VM_FLOW_CONTROL_INTERVAL = FormatString("CurrentTime= %s BytesSent= %s BytesDropped= %s NewSendWindow= %s MinSendWindow= %s", CurrentTime.ToString, BytesSent.ToString, BytesDropped.ToString, NewSendWindow.ToString, MinSendWindow.ToString)
{
	UINT64 CurrentTime;
	UINT32 BytesSent;
	UINT32 BytesDropped;
	UINT32 NewSendWindow;
	UINT32 MinSendWindow;
	UINT32 Weight;
	INT64 SBytesRequested;
	UINT32 DropRate;
	UINT64 IdleIntervals;
	UINT32 RcSendWindow;
	UINT32 RcEpisodeLength;
	UINT32 RcStatMuxFactor;
	UINT32 RcExitThreshold;
	UINT32 AverageMaxBytesRequested;
}
Struct VMSWITCH_VM_LINE_CONTROL_INTERVAL = FormatString("NetLuid= %s CurrentTime= %s ActiveFlows= %s ActiveWeight= %s NewSendWindow= %s", NetLuid.ToString, CurrentTime.ToString, ActiveFlows.ToString, ActiveWeight.ToString, NewSendWindow.ToString)
{
	BLOB(8) NetLuid;
	UINT64 CurrentTime;
	UINT32 ActiveFlows;
	UINT32 ActiveWeight;
	UINT32 NewSendWindow;
}
Struct VMSWITCH_VM_FLOW_CONFORMANCE = FormatString("FlowConformanceEventId= %s CurrentTime= %s LastConformanceTime= %s PeakConformanceTime= %s Tokens= %s MaxTokens= %s Rate= %s LastConformanceCredits= %s", FlowConformanceEvent.ToString, CurrentTime.ToString, LastConformanceTime.ToString, PeakConformanceTime.ToString, Tokens.ToString, MaxTokens.ToString, Rate.ToString, LastConformanceCredits.ToString)
{
	UINT32 FlowConformanceEvent = VMSWITCH_VMSWITCH_FLOW_CONFORMANCE_VALUEMAP(this);
	UINT64 CurrentTime;
	UINT64 LastConformanceTime;
	UINT64 PeakConformanceTime;
	UINT64 Tokens;
	UINT64 MaxTokens;
	UINT64 Rate;
	UINT32 LastConformanceCredits;
}
Struct VMSWITCH_VM_FLOW_SEND_QUEUE = FormatString("FlowSendQueueEventId= %s CurrentTime= %s IdleTime= %s DelayTime= %s BytesRequested= %s BytesSent= %s BytesQueued= %s", FlowSendQueueEvent.ToString, CurrentTime.ToString, IdleTime.ToString, DelayTime.ToString, BytesRequested.ToString, BytesSent.ToString, BytesQueued.ToString)
{
	UINT32 FlowSendQueueEvent = VMSWITCH_VMSWITCH_FLOW_SEND_QUEUE_VALUEMAP(this);
	UINT64 CurrentTime;
	UINT64 IdleTime;
	UINT64 DelayTime;
	UINT32 BytesRequested;
	UINT32 BytesSent;
	UINT32 BytesQueued;
}
Struct VMSWITCH_VM_TIMER = FormatString("TimerId= %s EventId= %s CurrentTime= %s SetTime= %s RunTime= %s FlowsProcessed= %s NblsSent= %s NblsDropped= %s Flags= %s", TimerEvent.ToString, TimerId.ToString, CurrentTime.ToString, SetTime.ToString, RunTime.ToString, FlowsProcessed.ToString, NblsSent.ToString, NblsDropped.ToString, Flags.ToString)
{
	UINT32 TimerEvent = VMSWITCH_VMSWITCH_TIMER_VALUEMAP(this);
	UINT32 TimerId;
	UINT64 CurrentTime;
	UINT64 SetTime;
	UINT64 RunTime;
	UINT32 FlowsProcessed;
	UINT32 NblsSent;
	UINT32 NblsDropped;
	UINT32 Flags;
}
Struct VMSWITCH_VM_LINE_BUFFER_SAMPLE = FormatString("NetLuid= %s CurrentTime= %s BytesRequested= %s BytesCompleted= %s BytesInQueue= %s BufferAvailable= %s AlphaTerm= %s BetaTerm= %s DeltaSendWindow= %s NewSendWindow= %s", NetLuid.ToString, CurrentTime.ToString, BytesRequested.ToString, BytesCompleted.ToString, BytesInQueue.ToString, BufferAvailable.ToString, AlphaTerm.ToString, BetaTerm.ToString, DeltaSendWindow.ToString, NewSendWindow.ToString)
{
	BLOB(8) NetLuid;
	UINT64 CurrentTime;
	UINT32 BytesRequested;
	UINT32 BytesCompleted;
	UINT32 BytesInQueue;
	INT64 BufferAvailable;
	INT64 BetaTerm;
	INT64 AlphaTerm;
	INT64 DeltaSendWindow;
	INT64 NewSendWindow;
}
Struct VMSWITCH_VM_QOS_PACKET_DROP = FormatString("Qos Packet dropped, reason=%s", DropReason.ToString)
{
	UINT32 DropReason = VMSWITCH_VMSWITCH_QOS_DROP_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_NBL_INCOMING_DROP = FormatString("NBL originating from Nic %s (Friendly Name: %s) was dropped in switch %s (Friendly Name: %s), Reason %s", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, DropReason.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 DropReason = VMSWITCH_VMSWITCH_PKT_DROP_REASON_ValueMap(this);
}
Struct VMSWITCH_VM_NBL_OUTGOING_DROP = FormatString("NBL destined to Nic %s (Friendly Name: %s) was dropped in switch %s (Friendly Name: %s), Reason %s", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, DropReason.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 DropReason = VMSWITCH_VMSWITCH_PKT_DROP_REASON_ValueMap(this);
}
Struct VMSWITCH_VM_NBL_RECEIVE = FormatString("NBL received from Nic %s (Friendly Name: %s) in switch %s (Friendly Name: %s)", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_NBL_ROUTE = FormatString("NBL routed from Nic %s (Friendly Name: %s) to Nic %s (Friendly Name: %s) on switch %s (Friendly Name: %s)", SrcNicName.ToString, SrcNicFName.ToString, DestNicName.ToString, DestNicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 DestNicNameLen;
	UnicodeString(DestNicNameLen) DestNicName;
	UINT32 DestNicFNameLen;
	UnicodeString(DestNicFNameLen) DestNicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_NBL_DELIVER = FormatString("NBL delivered to Nic %s (Friendly Name: %s) in switch %s (Friendly Name: %s)", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_NBL_VETO_DELIVERY = FormatString("Switch extension %s has vetoed delivery of NBL from Nic %s (Friendly Name: %s) to Nic %s (Friendly Name: %s) on switch %s (Friendly Name: %s)", ExtensionName.ToString, SrcNicName.ToString, SrcNicFName.ToString, DestNicName.ToString, DestNicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 ExtensionNameLen;
	UnicodeString(ExtensionNameLen) ExtensionName;
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 DestNicNameLen;
	UnicodeString(DestNicNameLen) DestNicName;
	UINT32 DestNicFNameLen;
	UnicodeString(DestNicFNameLen) DestNicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_NBL_EXTENSION_DROP = FormatString("NBLs were dropped by extension %s (Friendly Name: %s) in switch %s (Friendly Name: %s). Source Nic %s (Friendly Name: %s), Reason %s ", ExtensionGuid.ToString, ExtensionFriendlyName.ToString, SwitchName.ToString, SwitchFName.ToString, SrcNicName.ToString, SrcNicFName.ToString, Reason.ToString)
{
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 ExtensionGuidLen;
	UnicodeString(ExtensionGuidLen) ExtensionGuid;
	UINT32 ExtensionFriendlyNameLen;
	UnicodeString(ExtensionFriendlyNameLen) ExtensionFriendlyName;
	UINT32 ReasonLen;
	UnicodeString(ReasonLen) Reason;
}
Struct VMSWITCH_VM_NIC_RESTORE_PROPERTY_NOT_HANDLED = FormatString("Saved state restored for NIC %s (Friendly Name: %s) on Virtual Machine ID %s (Friendly Name: %s) was not processed. The state %s was originally saved by Extension %s (Friendly Name: %s). Restore will continue.", NicName.ToString, NicFName.ToString, VMId.ToString, VMName.ToString, FeatureClassId.ToString, ExtensionId.ToString, ExtensionName.ToString)
{
	UINT32 ExtensionNameLength;
	UnicodeString(ExtensionNameLength) ExtensionName;
	GUID(true) ExtensionId;
	GUID(true) FeatureClassId;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 VMNameLen;
	UnicodeString(VMNameLen) VMName;
	UINT32 VMIdLen;
	UnicodeString(VMIdLen) VMId;
}
Struct VMSWITCH_VM_SWITCH_SUCCESSFULLY_DELETED = FormatString("Switch %s (Friendly Name: %s) successfully deleted.", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_DELETE_SWITCH_FAILED = FormatString("Failed to delete switch %s (Friendly Name: %s), status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_SWITCH_INFO_SET = FormatString("Switch %s (Friendly Name: %s) info successfully set.", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_INFO_SET_FAILED = FormatString("Failed to set switch info for switch %s (Friendly Name: %s), status = %s, UniqueEvent = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_SWITCH_DELETE_COMPLETE = FormatString("Delete complete for Switch %s (Friendly Name: %s).", SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_CREATED = FormatString("Port %s (Friendly Name: %s) successfully created on switch %s (Friendly Name: %s).", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_CREATE_FAILED = FormatString("Failed to create port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_SUCCESSFULLY_DELETED = FormatString("Port %s (Friendly Name: %s) successfully deleted - switch %s (Friendly Name: %s).", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_DELETE_PORT_FAILED = FormatString("Failed to delete port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_DELETE_COMPLETE = FormatString("Delete complete for port %s (Friendly Name: %s).", PortName.ToString, PortFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_PORT_SET_MONITOR_MODE_FAILED = FormatString("Failed to set monitor mode on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_SET_VLAN_INFO_FAILED = FormatString("Failed to set VLAN info on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_SET_IP_SPOOFING_INFO_FAILED = FormatString("Failed to set IP spoofing info on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_OPERATION_FAILED = FormatString("The operation '%s' failed on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
}
Struct VMSWITCH_VM_NIC_OPERATION_FAILED = FormatString("The operation '%s' failed on nic %s (Friendly Name: %s). Status = %s.", Operation.ToString, NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_NIC_DISCONNECT_FAILED = FormatString("Failed to disconnect NIC %s (Friendly Name: %s), status = %s.", NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_POLICY_FAILED_SYSTEM = FormatString("Failed to complete operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Property Id %s Instance Id %s. Status = %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_POLICY_SUCCESS = FormatString("Completed operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Property Id %s Instance Id %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_POLICY_FAILED = FormatString("Failed to complete operation '%s' on switch %s (Friendly Name: %s) Property Id %s Instance Id %s. Status = %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_POLICY_SUCCESS = FormatString("Completed operation '%s' on switch %s (Friendly Name: %s) Property Id %s Instance Id %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_BANDWIDTH_POLICY_FAILED = FormatString("Failed to complete bandwidth policy operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s, Limit - %s, BurstLimit - %s, BurstSize - %s, Reason - %s, Status = %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString, Limit.ToString, BurstLimit.ToString, BurstSize.ToString, FailReason.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	INT64 Reservation;
	INT64 Weight;
	INT64 Limit;
	INT64 BurstLimit;
	INT64 BurstSize;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_BANDWIDTH_POLICY_SUCCESS = FormatString("Completed bandwidth policy operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s, Limit - %s, BurstLimit - %s, BurstSize - %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString, Limit.ToString, BurstLimit.ToString, BurstSize.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	INT64 Reservation;
	INT64 Weight;
	INT64 Limit;
	INT64 BurstLimit;
	INT64 BurstSize;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_DEFAULT_FLOW_FAILURE = FormatString("Failed to create default flow on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s ,Status = %s.", SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString, Status.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	NTSTATUS Status;
	INT64 Reservation;
	INT64 Weight;
}
Struct VMSWITCH_VM_DEFAULT_FLOW_SUCCESS = FormatString("Successfully created default flow on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s.", SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	NTSTATUS Status;
	INT64 Reservation;
	INT64 Weight;
}
Struct VMSWITCH_VM_PORT_POLICY_FAILED_DEBUG = FormatString("Failed to complete operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Property Id %s Instance Id %s. Status = %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_VLAN_PTNIC_NOT_SUPPORTED = FormatString("The connected Nic %s (Friendly Name: %s) does not support VLAN configuration as it is external. The VLAN configuration on port %s (Friendly Name: %s) will be ignored.", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_PORT_SECURITY_POLICY_FAILED = FormatString("Failed to complete security policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - AllowMacSpoofing: %s, EnableDhcpGuard: %s, EnableRouterGuard: %s, MonitorMode: %s, AllowIeeePriorityTag: %s, VirtualSubnetId: %s, AllowTeaming: %s, StormLimit: %s, DynamicIPAddressLimit: %s, EnableFixSpeed10G: %s, Reason: %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, AllowMacSpoofing.ToString, EnableDhcpGuard.ToString, EnableRouterGuard.ToString, MonitorMode.ToString, AllowIeeePriorityTag.ToString, VirtualSubnetId.ToString, AllowTeaming.ToString, StormLimit.ToString, DynamicIPAddressLimit.ToString, EnableFixSpeed10G.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	BOOL AllowMacSpoofing;
	BOOL EnableDhcpGuard;
	BOOL EnableRouterGuard;
	UINT32 MonitorMode;
	UINT32 MonitorSession;
	BOOL AllowIeeePriorityTag;
	UINT32 VirtualSubnetId;
	BOOL AllowTeaming;
	UINT32 StormLimit;
	UINT32 DynamicIPAddressLimit;
	BOOL EnableFixSpeed10G;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_SECURITY_POLICY_SUCCESS = FormatString("Completed security policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - AllowMacSpoofing: %s, EnableDhcpGuard: %s, EnableRouterGuard: %s, MonitorMode: %s, AllowIeeePriorityTag: %s, VirtualSubnetId: %s, AllowTeaming %s, StormLimit: %s, DynamicIPAddressLimit: %s, EnableFixSpeed10G: %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, AllowMacSpoofing.ToString, EnableDhcpGuard.ToString, EnableRouterGuard.ToString, MonitorMode.ToString, AllowIeeePriorityTag.ToString, VirtualSubnetId.ToString, AllowTeaming.ToString, StormLimit.ToString, DynamicIPAddressLimit.ToString, EnableFixSpeed10G.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	BOOL AllowMacSpoofing;
	BOOL EnableDhcpGuard;
	BOOL EnableRouterGuard;
	UINT32 MonitorMode;
	UINT32 MonitorSession;
	BOOL AllowIeeePriorityTag;
	UINT32 VirtualSubnetId;
	BOOL AllowTeaming;
	UINT32 StormLimit;
	UINT32 DynamicIPAddressLimit;
	BOOL EnableFixSpeed10G;
}
Struct VMSWITCH_VM_PORT_ACL_POLICY_FAILED = FormatString("Failed to complete Port ACL policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - Direction: %s, Applicability: %s, AclType: %s, Action: %s, LocalAddress: '%s', LocalPrefixLength: %s, RemoteAddress: '%s', RemotePrefixLength: %s. Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Direction.ToString, Applicability.ToString, Type.ToString, Action.ToString, LocalAddr.ToString, LocalPrefix.ToString, RemoteAddr.ToString, RemotePrefix.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Direction = VMSWITCH_VMSWITCH_ACL_DIRECTION_VALUEMAP(this);
	UINT32 Applicability = VMSWITCH_VMSWITCH_ACL_APPLICABILITY_VALUEMAP(this);
	UINT32 Type = VMSWITCH_VMSWITCH_ACL_TYPE_VALUEMAP(this);
	UINT32 Action = VMSWITCH_VMSWITCH_ACL_ACTION_VALUEMAP(this);
	UINT32 LocalAddrLen;
	UnicodeString(LocalAddrLen) LocalAddr;
	UINT32 LocalPrefix;
	UINT32 RemoteAddrLen;
	UnicodeString(RemoteAddrLen) RemoteAddr;
	UINT32 RemotePrefix;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_ACL_POLICY_SUCCESS = FormatString("Completed Port ACL policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - Direction: %s, Applicability: %s, AclType: %s, Action: %s, LocalAddress: '%s', LocalPrefixLength: %s, RemoteAddress: '%s', RemotePrefixLength: %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Direction.ToString, Applicability.ToString, Type.ToString, Action.ToString, LocalAddr.ToString, LocalPrefix.ToString, RemoteAddr.ToString, RemotePrefix.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Direction = VMSWITCH_VMSWITCH_ACL_DIRECTION_VALUEMAP(this);
	UINT32 Applicability = VMSWITCH_VMSWITCH_ACL_APPLICABILITY_VALUEMAP(this);
	UINT32 Type = VMSWITCH_VMSWITCH_ACL_TYPE_VALUEMAP(this);
	UINT32 Action = VMSWITCH_VMSWITCH_ACL_ACTION_VALUEMAP(this);
	UINT32 LocalAddrLen;
	UnicodeString(LocalAddrLen) LocalAddr;
	UINT32 LocalPrefix;
	UINT32 RemoteAddrLen;
	UnicodeString(RemoteAddrLen) RemoteAddr;
	UINT32 RemotePrefix;
}
Struct VMSWITCH_VM_PORT_POLICY_FAILED_EXTENSION = FormatString("A switch extension blocked the operation '%s' on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) Property Id %s Instance Id %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_POLICY_FAILED_EXTENSION = FormatString("A switch extension blocked the operation '%s' on switch %s (Friendly Name: %s) Property Id %s Instance Id %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_OFFLOAD_POLICY_FAILED = FormatString("Failed to complete offload policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - IPSecOffloadLimit: %s, VMQOffloadWeight: %s, IovOffloadWeight: %s, QueuePairs: %s, InterruptModeration: %s. Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, IPSecOffloadLimit.ToString, VMQOffloadWeight.ToString, IovOffloadWeight.ToString, QueuePairs.ToString, InterruptModeration.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 IPSecOffloadLimit;
	UINT32 VMQOffloadWeight;
	UINT32 IovOffloadWeight;
	UINT32 QueuePairs;
	UINT32 InterruptModeration;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_VALIDATE_VLAN_INFO_FAILED = FormatString("The VLAN configuration being set on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) is invalid. Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_VLAN_EXTNIC_NOT_ENABLED = FormatString("VLAN tagging is configured on port %s (Friendly Name: %s), connected Nic %s (Friendly Name: %s). However, the external NIC connected to this switch does not support VLAN or VLAN is disabled. This might lead to external network connectivity issues.", PortName.ToString, PortFName.ToString, NicName.ToString, NicFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_SWITCH_GET_EXTENSIONS_FAILURE = FormatString("Failed to retrieve the active extension list from switch %s (Friendly Name: %s), status = %s, Reason = %s.", SwitchName.ToString, SwitchFName.ToString, Status.ToString, FailReason.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_GET_EXTENSIONS_FAILURE_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_NIC_EXTENSION_REQUIREMENTS_NOT_MET = FormatString("Connectivity has been blocked for NIC %s (Friendly Name: %s) on port %s (Friendly Name: %s). Extension %s is required on the port, but it is not active on switch %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, ExtensionId.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	GUID(true) ExtensionId;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_NIC_EXTENSION_REQUIREMENT_MISSING = FormatString("Connectivity has been blocked for NIC %s (Friendly Name: %s) on port %s (Friendly Name: %s) on switch %s(Friendly Name: %s). An extension feature is required on the port, but it is not registered on the system.", NicName.ToString, NicFName.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_BANDWIDTH_POLICY_FAILED = FormatString("Failed to complete bandwidth policy operation '%s' on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s, Reason - %s, Status = %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString, FailReason.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	INT64 Reservation;
	INT64 Weight;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_BANDWIDTH_POLICY_SUCCESS = FormatString("Completed bandwidth policy operation '%s' on switch %s (Friendly Name: %s) Reservation - %s, Weight - %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, Reservation.ToString, Weight.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	INT64 Reservation;
	INT64 Weight;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_NIC_PROTOCOL_VERSION_NEGOTIATION_SUCCESS = FormatString("Networking driver in %s is loaded and the protocol version is negotiated to the most recent version (Virtual machine ID %s).", VMName.ToString, VMId.ToString)
{
	UINT32 VMNameLen;
	UnicodeString(VMNameLen) VMName;
	UINT32 VMIdLen;
	UnicodeString(VMIdLen) VMId;
}
Struct VMSWITCH_VM_SWITCH_POLICY_FAILED_DEBUG = FormatString("Failed to complete operation '%s' on switch %s (Friendly Name: %s) Property Id %s Instance Id %s. Status = %s.", Operation.ToString, SwitchName.ToString, SwitchFName.ToString, PropertyId.ToString, InstanceId.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	GUID(true) PropertyId;
	GUID(true) InstanceId;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_POLICY_VALUEMAP(this);
}
Struct VMSWITCH_VM_NIC_OPERATION_FAILED_DEBUG = FormatString("The operation '%s' failed on nic %s (Friendly Name: %s). Status = %s.", Operation.ToString, NicName.ToString, NicFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_PORT_OPERATION_FAILED_DEBUG = FormatString("The operation '%s' failed on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Status = %s.", Operation.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
}
Struct VMSWITCH_VM_VMQ_GROUP_PROCESSOR_SET_INVALID = FormatString("Available processor sets of the underlying physical NICs belonging to the LBFO team NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s) are not configured correctly. Reason: %s", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, QueueMode.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 QueueMode = VMSWITCH_VMSWITCH_VMQ_PROC_SET_INVALID_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_OID_FORWARD = FormatString("%s. OID (%s) on switch %s (Friendly Name: %s).", DataOidTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 DataOidTarget = VMSWITCH_VMSWITCH_OID_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_OID_FORWARD_RESULT = FormatString("%s. OID (%s) on switch %s (Friendly Name: %s), Result: %s.", DataOidTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	UINT32 DataOidTarget = VMSWITCH_VMSWITCH_OID_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Status;
}
Struct VMSWITCH_VM_SWITCH_OID_NIC_REQ_FORWARD = FormatString("%s. NIC_REQUEST OID (%s) on switch %s (Friendly Name: %s) on behalf of NIC %s (Friendly Name: %s) (Index: %s) to  NIC %s (Friendly Name: %s) (Index: %s)", DataOidTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString, SrcNicName.ToString, SrcNicFName.ToString, SrcNicIndex.ToString, DstNicName.ToString, DstNicFName.ToString, DstNicIndex.ToString)
{
	UINT32 DataOidTarget = VMSWITCH_VMSWITCH_OID_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 SrcNicIndex;
	UINT32 DstNicNameLen;
	UnicodeString(DstNicNameLen) DstNicName;
	UINT32 DstNicFNameLen;
	UnicodeString(DstNicFNameLen) DstNicFName;
	UINT32 DstNicIndex;
}
Struct VMSWITCH_VM_SWITCH_OID_NIC_REQ_FORWARD_RESULT = FormatString("%s. NIC_REQUEST OID (%s) on switch %s (Friendly Name: %s) on behalf of NIC %s (Friendly Name: %s) (Index: %s) to  NIC %s (Friendly Name: %s) (Index: %s), Result: %s", DataOidTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString, SrcNicName.ToString, SrcNicFName.ToString, SrcNicIndex.ToString, DstNicName.ToString, DstNicFName.ToString, DstNicIndex.ToString, Status.ToString)
{
	UINT32 DataOidTarget = VMSWITCH_VMSWITCH_OID_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 SrcNicIndex;
	UINT32 DstNicNameLen;
	UnicodeString(DstNicNameLen) DstNicName;
	UINT32 DstNicFNameLen;
	UnicodeString(DstNicFNameLen) DstNicFName;
	UINT32 DstNicIndex;
	UINT32 Status;
}
Struct VMSWITCH_VM_SWITCH_STATUS_FORWARD = FormatString("%s. Status (%s) on switch %s (Friendly Name: %s).", StatusTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 StatusTarget = VMSWITCH_VMSWITCH_STATUS_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_SWITCH_STATUS_NIC_STATUS_FORWARD = FormatString("%s. NIC_STATUS Status (%s) on switch %s (Friendly Name: %s) on behalf of NIC %s (Friendly Name: %s) (Index: %s) to  NIC %s (Friendly Name: %s) (Index: %s)", StatusTarget.ToString, Oid.ToString, SwitchName.ToString, SwitchFName.ToString, SrcNicName.ToString, SrcNicFName.ToString, SrcNicIndex.ToString, DstNicName.ToString, DstNicFName.ToString, DstNicIndex.ToString)
{
	UINT32 StatusTarget = VMSWITCH_VMSWITCH_STATUS_TARGET_VALUEMAP(this);
	UINT32 Oid;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 SrcNicNameLen;
	UnicodeString(SrcNicNameLen) SrcNicName;
	UINT32 SrcNicFNameLen;
	UnicodeString(SrcNicFNameLen) SrcNicFName;
	UINT32 SrcNicIndex;
	UINT32 DstNicNameLen;
	UnicodeString(DstNicNameLen) DstNicName;
	UINT32 DstNicFNameLen;
	UnicodeString(DstNicFNameLen) DstNicFName;
	UINT32 DstNicIndex;
}
Struct VMSWITCH_VM_VMQ_ALLOCATION_FAILED = FormatString("Failed to allocate VMQ for NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Reason - %s. Status = %s", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_VMQ_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_VMQ_ALLOCATION_FAILED_DEBUG = FormatString("Failed to allocate VMQ for NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Reason - %s. Status = %s", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString, Status.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_VMQ_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_VMQ_ALLOCATION_SUCCESS = FormatString("Completed VMQ allocation for NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_NIC_TEAM_MEMBER_CONNECT = FormatString("Switch Team member connected. NIC %s (Friendly Name: %s) with NicIndex %s (NetCfgInstanceId: %s) on switch %s (Friendly Name: %s). Status = %s", NicName.ToString, NicFName.ToString, NicIndex.ToString, NetCfgInstanceId.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 NicIndex;
	GUID(true) NetCfgInstanceId;
	UINT32 Status;
}
Struct VMSWITCH_VM_NIC_TEAM_MEMBER_DISCONNECT = FormatString("Switch Team member disconnected. NIC %s (Friendly Name: %s) with NicIndex %s (NetCfgInstanceId: %s) on switch %s (Friendly Name: %s). Status = %s", NicName.ToString, NicFName.ToString, NicIndex.ToString, NetCfgInstanceId.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 NicIndex;
	GUID(true) NetCfgInstanceId;
	UINT32 Status;
}
Struct VMSWITCH_VM_NIC_TEAM_CONFIGURATION = FormatString("The external NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s) is connected to %s.", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, ConfigurationType.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 ConfigurationType = VMSWITCH_VMSWITCH_NIC_TEAM_CONFIGURATION_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_IOV_MAC_SPOOFING_NOT_SUPPORTED = FormatString("Port %s (Friendly Name: %s) has MAC address spoofing enabled. This is not supported on the associated switch %s (Friendly Name: %s) because IOV is enabled. Traffic with a spoofed MAC address will not function properly.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_BANDWIDTH_RESERVATION_FAILURE = FormatString("The configured bandwidth reservation might not be applied on switch %s (Friendly Name: %s) as the external NIC %s (Friendly Name: %s)'s link speed is less than the total reservation configured.", SwitchName.ToString, SwitchFName.ToString, NicName.ToString, NicFName.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_PORT_IOV_EXTENSION_REVOKE_VF = FormatString("An extension is attempting to revoke the VF allocated for Port %s (Friendly Name: %s) on switch %s (Friendly Name: %s).", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
}
Struct VMSWITCH_VM_VMQ_GROUP_CREATE_FAILED = FormatString("VMQ group creation failed with NIC %s (Friendly Name: %s) on switch %s (Friendly Name: %s) with status = %s. Reason: %s.", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, QueueMode.ToString, Status.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 QueueMode;
	UINT32 Status;
	UINT32 FailReason = VMSWITCH_VMSWITCH_VMQ_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_VMQ_CAPS = FormatString("VMQ capabilities received from NIC %s (Friendly Name: %s): VmqSupported - %s, DynamicVmqSupported - %s.", NicName.ToString, NicFName.ToString, VmqSupported.ToString, dynamicVmqSupported.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT64 LinkSpeed;
	BOOL VmqSupported;
	BOOL dynamicVmqSupported;
	UINT32 QueueMode;
	UINT32 EnabledFilterTypes;
	UINT32 EnabledQueueTypes;
	UINT32 SupportedQueueProperties;
	UINT32 SupportedFilterTests;
	UINT32 SupportedHeaders;
	UINT32 SupportedMacHeaderFields;
}
Struct VMSWITCH_VM_MINIPORT_RESTART = FormatString("NIC %s (Friendly Name: %s) restarted.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MINIPORT_CONNECTED = FormatString("Media connected on NIC %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_MINIPORT_DISCONNECTED = FormatString("Media disconnected on NIC %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_PORT_DELETE_ISOLATION_FAILED = FormatString("The Isolation configuration could not be deleted from port %s (Friendly Name: %s) on switch %s (Friendly Name: %s). Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_VALIDATE_ISOLATION_FAILED = FormatString("The Isolation configuration set on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) is invalid. Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_PORT_VALIDATE_ROUTING_DOMAIN_FAILED = FormatString("The Routing Domain configuration (Routing Domain: %s, GUID: %s) set on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) is invalid. Reason: %s", RoutingDomainName.ToString, RoutingDomainGuid.ToString, PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
	UINT32 RoutingDomainGuidLen;
	UnicodeString(RoutingDomainGuidLen) RoutingDomainGuid;
	UINT32 RoutingDomainNameLen;
	UnicodeString(RoutingDomainNameLen) RoutingDomainName;
}
Struct VMSWITCH_VM_EXTENDED_PORT_ACL_POLICY_FAILED = FormatString("Failed to complete Extended Port ACL policy operation on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) - Direction: %s, Action: %s, LocalIPAddress: '%s', RemoteIPAddress: '%s', LocalPort: '%s', RemotePort: '%s', Protocol: %s, Weight: %s, Stateful: %s, IdleSessionTimeout: %s, VirtualSubnetId: %s. Reason: %s", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Direction.ToString, Action.ToString, LocalIPAddr.ToString, RemoteIPAddr.ToString, LocalPort.ToString, RemotePort.ToString, Protocol.ToString, Weight.ToString, Stateful.ToString, IdleSessionTimeout.ToString, VirtualSubnetId.ToString, FailReason.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Direction = VMSWITCH_VMSWITCH_ACL_DIRECTION_VALUEMAP(this);
	UINT32 Action = VMSWITCH_VMSWITCH_ACL_ACTION_VALUEMAP(this);
	UINT32 LocalIPAddrLen;
	UnicodeString(LocalIPAddrLen) LocalIPAddr;
	UINT32 RemoteIPAddrLen;
	UnicodeString(RemoteIPAddrLen) RemoteIPAddr;
	UINT32 LocalPortLen;
	UnicodeString(LocalPortLen) LocalPort;
	UINT32 RemotePortLen;
	UnicodeString(RemotePortLen) RemotePort;
	UINT32 Protocol;
	UINT32 Weight;
	BOOL Stateful;
	UINT32 IdleSessionTimeout;
	UINT32 VirtualSubnetId;
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_EXTENDED_PORT_ACL_PKT_DROPPED = FormatString("A packet was dropped on port %s (Friendly Name: %s) on switch %s (Friendly Name: %s) because the packet is filtered by %s extended port ACL entry with weight %s.", PortName.ToString, PortFName.ToString, SwitchName.ToString, SwitchFName.ToString, Direction.ToString, Weight.ToString)
{
	UINT32 PortNameLen;
	UnicodeString(PortNameLen) PortName;
	UINT32 PortFNameLen;
	UnicodeString(PortFNameLen) PortFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Direction = VMSWITCH_VMSWITCH_ACL_DIRECTION_VALUEMAP(this);
	UINT32 Weight;
}
Struct VMSWITCH_VM_SWITCH_EXT_ACTIVATE_FAILED = FormatString("The extension stack for Switch %s (Friendly Name: %s) failed to start because an extension failed to Activate.", SwitchName.ToString, SwitchFName.ToString)
{
	NTSTATUS Status;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_RSS_CANDIDATE_RSS_QUEUE = FormatString("RSS queue %s from VMQ %s of switch %s (Friendly Name: %s) is marked as a moving candidate of processor %s.", RssQueueIndex.ToString, VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 ProcIndex;
	UINT32 VmqIndex;
	UINT32 RssQueueIndex;
}
Struct VMSWITCH_VM_RSS_CANDIDATE_VMQ_QUEUE = FormatString("VMQ %s of switch %s (Friendly Name: %s) is marked as a moving candidate of processor %s.", VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 ProcIndex;
	UINT32 VmqIndex;
}
Struct VMSWITCH_VM_RSS_PROC_EXCEED_UPPER_THRESHOLD = FormatString("Processor %s is over %s percent.", ProcIndex.ToString, ProcUtil.ToString)
{
	UINT32 ProcIndex;
	UINT32 ProcUtil;
}
Struct VMSWITCH_VM_RSS_ADJUSTED_LOAD = FormatString("Adjusted load of RSS queue %s from VMQ %s of switch %s (Friendly Name: %s) on processor %s is %s percent.", RssQueueIndex.ToString, VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString, QueueLoad.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 RssQueueIndex;
	UINT32 ProcIndex;
	UINT32 QueueLoad;
}
Struct VMSWITCH_VM_RSS_PERSPECTIVE_LOAD = FormatString("Perspective load of RSS queue %s from VMQ %s of switch %s (Friendly Name: %s) on processor %s is %s percent.", RssQueueIndex.ToString, VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString, QueueLoad.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 RssQueueIndex;
	UINT32 ProcIndex;
	UINT32 QueueLoad;
	UINT32 SafeThreshold;
}
Struct VMSWITCH_VM_VMQ_ADJUSTED_LOAD = FormatString("Adjusted load of VMQ %s on switch %s (Friendly Name: %s) on processor %s is %s percent.", VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString, QueueLoad.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 ProcIndex;
	UINT32 QueueLoad;
}
Struct VMSWITCH_VM_VMQ_PERSPECTIVE_LOAD = FormatString("Perspective load of VMQ %s on switch %s (Friendly Name: %s) on processor %s is %s percent.", VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ProcIndex.ToString, QueueLoad.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 ProcIndex;
	UINT32 QueueLoad;
	UINT32 SafeThreshold;
}
Struct VMSWITCH_VM_RSS_PROC_AFFINITY_CHANGE = FormatString("Assigned processor of RSS queue %s of VMQ %s on switch %s (Friendly Name: %s) was updated. The assigned processor for receives was %s, now %s. The assigned channel for sends was %s, now %s.", RssQueueIndex.ToString, VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, ReceiveProcIndex.ToString, DestinationReceiveProcIndex.ToString, SendProcIndex.ToString, DestinationSendProcIndex.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 VmqIndex;
	UINT32 RssQueueIndex;
	UINT32 ReceiveProcIndex;
	UINT32 SendProcIndex;
	UINT32 DestinationReceiveProcIndex;
	UINT32 DestinationSendProcIndex;
}
Struct VMSWITCH_VM_VMQ_RSS_QUEUE_GROUP_ACTION = FormatString("The RSS queue group of VMQ %s from switch %s (Friendly Name: %s) has been %s on processor %s.", VmqIndex.ToString, SwitchName.ToString, SwitchFName.ToString, IsActivate.ToString, ProcIndex.ToString)
{
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 IsActivate = VMSWITCH_VMSWITCH_RSS_GROUP_ACTION_VALUEMAP(this);
	UINT32 VmqIndex;
	UINT32 ProcIndex;
}
Struct VMSWITCH_VM_RSS_UPDATE_FAILED = FormatString("Virtual RSS configuration update failed on NIC %s (Friendly Name: %s) of switch %s (Friendly Name: %s) with status %s. Reason: %s.", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString, Status.ToString, FailReason.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_RSS_FAILED_REASON_VALUEMAP(this);
	UINT32 Status;
	UINT32 Flags;
	UINT32 BaseCpuNumber;
	UINT32 HashInformation;
	UINT32 IndirectionTableSize;
	UINT32 IndirectionTableOffset;
	UINT32 HashSecretKeySize;
	UINT32 HashSecretKeyOffset;
}
Struct VMSWITCH_VM_RSS_UPDATE_SUCCESS = FormatString("Virtual RSS configuration update succeeded on NIC %s (Friendly Name: %s) of switch %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString, SwitchName.ToString, SwitchFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 SwitchNameLen;
	UnicodeString(SwitchNameLen) SwitchName;
	UINT32 SwitchFNameLen;
	UnicodeString(SwitchFNameLen) SwitchFName;
	UINT32 Flags;
	UINT32 BaseCpuNumber;
	UINT32 HashInformation;
	UINT32 IndirectionTableSize;
	UINT32 IndirectionTableOffset;
	UINT32 HashSecretKeySize;
	UINT32 HashSecretKeyOffset;
}
Struct VMSWITCH_VM_VERIFIER_FAILURE = FormatString("Driver Verifier failure in vmswitch. Reason: %s.", FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_VERIFIER_FAILURE_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_POLICY_FAILED = FormatString("Policy configuration failed. Reason: %s", FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_POLICY_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_OPEN_NDK_ADAPTER_FAILED = FormatString("Ndk adapter failed to open on behalf of virtual NIC %s (Friendly Name: %s) on external NIC %s (Friendly Name: %s). Reason: %s.", NicName.ToString, NicFName.ToString, PtNicName.ToString, PtNicFName.ToString, FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_NDK_ADAPTER_FAILURE_REASON_VALUEMAP(this);
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PtNicNameLen;
	UnicodeString(PtNicNameLen) PtNicName;
	UINT32 PtNicFNameLen;
	UnicodeString(PtNicFNameLen) PtNicFName;
}
Struct VMSWITCH_VM_CLOSE_NDK_ADAPTER_FAILED = FormatString("Ndk adapter failed to close on behalf of virtual NIC %s (Friendly Name: %s) on external NIC %s (Friendly Name: %s). Reason: %s.", NicName.ToString, NicFName.ToString, PtNicName.ToString, PtNicFName.ToString, FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_NDK_ADAPTER_FAILURE_REASON_VALUEMAP(this);
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PtNicNameLen;
	UnicodeString(PtNicNameLen) PtNicName;
	UINT32 PtNicFNameLen;
	UnicodeString(PtNicFNameLen) PtNicFName;
}
Struct VMSWITCH_VM_NDK_OID = FormatString("Ndk Oid %s for external NIC %s (Friendly Name: %s) on behalf of virtual NIC %s (Friendly Name: %s). Status: %s.", NdisOid.ToString, PtNicNameLen.ToString, PtNicFNameLen.ToString, NicNameLen.ToString, NicFNameLen.ToString, Status.ToString)
{
	UINT32 NdisOid;
	UINT32 Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PtNicNameLen;
	UnicodeString(PtNicNameLen) PtNicName;
	UINT32 PtNicFNameLen;
	UnicodeString(PtNicFNameLen) PtNicFName;
}
Struct VMSWITCH_VM_NDK_PNP = FormatString("Ndk PnP event %s for virtual NIC %s (Friendly Name: %s). Status: %s.", NetEvent.ToString, NicNameLen.ToString, NicFNameLen.ToString, Status.ToString)
{
	UINT32 NetEvent;
	UINT32 Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_NDK_REQUEST_RDMA_FAILURE = FormatString("Request RDMA failed for virtual NIC %s (Friendly Name: %s) on external NIC %s (Friendly Name: %s). Reason: %s.", NicName.ToString, NicFName.ToString, PtNicName.ToString, PtNicFName.ToString, FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_NDK_REQUEST_RDMA_FAILURE_REASON_VALUEMAP(this);
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PtNicNameLen;
	UnicodeString(PtNicNameLen) PtNicName;
	UINT32 PtNicFNameLen;
	UnicodeString(PtNicFNameLen) PtNicFName;
}
Struct VMSWITCH_VM_NDK_UPDATE_VPORT_FAILURE = FormatString("Nic Switch VPort update failed (for RDMA) on behalf of virtual NIC %s (Friendly Name: %s) on external NIC %s (Friendly Name: %s). Reason: %s.", NicName.ToString, NicFName.ToString, PtNicName.ToString, PtNicFName.ToString, FailReason.ToString)
{
	UINT32 FailReason = VMSWITCH_VMSWITCH_NDK_UPDATE_VPORT_FAILURE_REASON_VALUEMAP(this);
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 PtNicNameLen;
	UnicodeString(PtNicNameLen) PtNicName;
	UINT32 PtNicFNameLen;
	UnicodeString(PtNicFNameLen) PtNicFName;
}
Struct VMSWITCH_ReplacingMemberInfo = FormatString("Replacing Member %s with new Member %s for load balancing", OldMember.ToString, NewMember.ToString)
{
	GUID(true) OldMember;
	GUID(true) NewMember;
}
Struct VMSWITCH_ExcludingMemberInfo = FormatString("Excluding Member %s from load balancing", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_UsingMemberInfo = FormatString("Using Member %s for load balancing", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_StartingConnectTimerInfo = FormatString("Starting ConnectTimer for Member %s", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_StoppingToUseMemberInfo = FormatString("Stopping to use Member %s for load balancing", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_PrimingSwitchInfo = FormatString("Priming Switch for TeamNic %s using Member %s", TeamNic.ToString, Member.ToString)
{
	EtlPtr TeamNic;
	GUID(true) Member;
}
Struct VMSWITCH_FailingSendOnMemberWarn = FormatString("Failing NBL send on Member %s", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_FailingSendOnTeamNicWarn = FormatString("Failing NBL send on TeamNic %s", TeamNic.ToString)
{
	EtlPtr TeamNic;
	INT32 Status;
}
Struct VMSWITCH_DroppingNBLsOnMemberWarn = FormatString("Dropping NBLs on Member %s", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_DriverEntryInfo = FormatString("DriverEntry exiting, Status = %s", Status.ToString)
{
	INT32 Status;
}
Struct VMSWITCH_MemberCreatedInfo = FormatString("Member %s created.", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_AggregatorCreatedInfo = FormatString("Aggregator %s created.", Aggregator.ToString)
{
	EtlPtr Aggregator;
}
Struct VMSWITCH_MemberTeamedInfo = FormatString("Member %s placed in Team %s, Status = %s.", Member.ToString, TeamNic.ToString, Status.ToString)
{
	EtlPtr TeamNic;
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_TnicLinkStatusIndicationInfo = FormatString("Indicating new link state for TeamNic %s. StatusBuffer = %s.", TeamNic.ToString, StatusBuffer.ToString)
{
	EtlPtr TeamNic;
	UINT32 StatusBufferLen;
	BLOB(StatusBufferLen) StatusBuffer;
}
Struct VMSWITCH_TNicDefaultAggChangedInfo = FormatString("Default Aggregator for TeamNic %s changed to %s.", TeamNic.ToString, Receiver.ToString)
{
	EtlPtr TeamNic;
	EtlPtr Receiver;
}
Struct VMSWITCH_TNicBroadcastRcvrChangedInfo = FormatString("BroadcastReceiver for TeamNic %s changed to %s.", TeamNic.ToString, Receiver.ToString)
{
	EtlPtr TeamNic;
	EtlPtr Receiver;
}
Struct VMSWITCH_InitializingTNicInfo = FormatString("Initializing TeamNic %s, Status = %s.", TeamNic.ToString, Status.ToString)
{
	EtlPtr TeamNic;
	INT32 Status;
}
Struct VMSWITCH_RemovingAggregatorInfo = FormatString("Removing Aggregator %s from TeamNic %s.", Aggregator.ToString, TeamNic.ToString)
{
	EtlPtr TeamNic;
	EtlPtr Aggregator;
}
Struct VMSWITCH_MemberUnteamedInfo = FormatString("Removed Member %s from TeamNic %s.", Member.ToString, TeamNic.ToString)
{
	EtlPtr TeamNic;
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_RemovingTeamNicInfo = FormatString("Removing TeamNic %s.", TeamNic.ToString)
{
	EtlPtr TeamNic;
	INT32 Status;
}
Struct VMSWITCH_DriverUnloadingInfo = "MsLbfoProvider driver is unloading." {}; // Empty Struct
Struct VMSWITCH_MemberAggrChangeInfo = FormatString("Changing Aggregator for Member %s from %s to %s.", Member.ToString, OldAggregator.ToString, NewAggregator.ToString)
{
	GUID(true) Member;
	EtlPtr OldAggregator;
	EtlPtr NewAggregator;
}
Struct VMSWITCH_LacpInitingInfo = FormatString("LACP Initializing for Member %s, Status = %s.", Member.ToString, Status.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_LacpDeinitingInfo = FormatString("LACP de-initialized for Member %s.", Member.ToString)
{
	GUID(true) Member;
	INT32 Status;
}
Struct VMSWITCH_ReceivedLACPDUInfo = FormatString("Received LACPDU on Member %s. Buffer= %s.", Member.ToString, Buffer.ToString)
{
	GUID(true) Member;
	UINT32 BufferLen;
	BLOB(BufferLen) Buffer;
}
Struct VMSWITCH_LACPRcvMcTransitionInfo = FormatString("LBFO LACP Member %s; ReceiveMachine: %s->%s.", Member.ToString, OldState.ToString, NewState.ToString)
{
	GUID(true) Member;
	UINT32 OldState;
	UINT32 NewState;
}
Struct VMSWITCH_LACPPeriodicTrMcTransitionInfo = FormatString("LBFO LACP Member %s; Periodic Transmission Machine: %s->%s.", Member.ToString, OldState.ToString, NewState.ToString)
{
	GUID(true) Member;
	UINT32 OldState;
	UINT32 NewState;
}
Struct VMSWITCH_LACPMuxMcTransitionInfo = FormatString("LBFO LACP Member %s; Mux Machine: %s->%s.", Member.ToString, OldState.ToString, NewState.ToString)
{
	GUID(true) Member;
	UINT32 OldState;
	UINT32 NewState;
}
Struct VMSWITCH_SendingLACPDUInfo = FormatString("Sending LACPDU on Member %s. Buffer= %s.", Member.ToString, Buffer.ToString)
{
	GUID(true) Member;
	UINT32 BufferLen;
	BLOB(BufferLen) Buffer;
}
Struct VMSWITCH_LACPSelectAggrInfo = FormatString("LBFO LACP Member %s; Selected NewAgg: %s, Ready:%s.", Member.ToString, NewAggregator.ToString, Ready.ToString)
{
	GUID(true) Member;
	EtlPtr OldAggregator;
	EtlPtr NewAggregator;
	BOOL Ready;
}
Struct VMSWITCH_LACPUnselectAggrInfo = FormatString("LBFO LACP Member %s; UnSelected, OldAgg: %s NewAgg: %s.", Member.ToString, OldAggregator.ToString, NewAggregator.ToString)
{
	GUID(true) Member;
	EtlPtr OldAggregator;
	EtlPtr NewAggregator;
	BOOL Ready;
}
Struct VMSWITCH_LACPChurnDetectionInfo = FormatString("LBFO LACP Member %s; Churn Type (%s): %s->%s.", Member.ToString, ChurnType.ToString, OldState.ToString, NewState.ToString)
{
	GUID(true) Member;
	INT32 ChurnType;
	INT32 OldState;
	INT32 NewState;
}
Struct VMSWITCH_SYS_EVENT_NIC_CONNECTED = FormatString("Member Nic %s Connected.", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_SYS_EVENT_NIC_DISCONNECTED = FormatString("Member Nic %s Disconnected.", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_SYS_EVENT_NIC_CONNECTION_TIMER_STARTED = FormatString("Connection Timer Started for Member Nic %s. It will be in use shortly.", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_SYS_EVENT_NIC_LACP_CHURN_DETECTED = FormatString("LACP Churn detected on Member Nic %s.", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_SYS_EVENT_VLAN_ON_NON_DEFAULT_TNIC_DETECTED = FormatString("Use of Vlan detected on non-default Team Nic %s", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_SYS_EVENT_VMS_PORT_MAC_CONFLICT_DETECTED = FormatString("MAC conflict: A port on the virtual switch has the same MAC as one of the underlying team members on Team Nic %s", Member.ToString)
{
	UnicodeString DriverObject;
	UnicodeString Member;
}
Struct VMSWITCH_VM_TEAM_UPDATE_NDIS_QOS_FAILED = FormatString("Failed to update team NIC NDIS QoS with miniport NIC %s (Friendly Name: %s), status = %s. UniqueEvent = %s", NicName.ToString, NicFName.ToString, Status.ToString, UniqueEvent.ToString)
{
	NTSTATUS Status;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 UniqueEvent;
}
Struct VMSWITCH_VM_TEAM_UPDATE_NDIS_QOS_SUCCEEDED = FormatString("Successfully updated team NIC NDIS QoS with Miniport NIC %s (Friendly Name: %s)", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_TEAM_NDIS_QOS_INCONSISTENT = FormatString("Team NIC %s (Friendly Name: %s) has inconsistent consolidated NDIS QoS settings", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_TEAM_NDIS_QOS_CONSISTENT = FormatString("Team NIC %s (Friendly Name: %s) has consistent consolidated NDIS QoS settings", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
}
Struct VMSWITCH_VM_SWITCH_SAVE_RESTORE_OPERATION_FAILED = FormatString("%s operation failed for NIC %s (Friendly Name: %s). Reason: %s, Error Code: %s", Operation.ToString, NicName.ToString, NicFName.ToString, FailureReason.ToString, FailureCode.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
	NTSTATUS FailureCode;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_SAVE_RESTORE_FAILURE_VALUEMAP(this);
	UINT32 Ext1;
	UINT32 Ext2;
}
Struct VMSWITCH_VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_FAILED = FormatString("Switch Extension %s operation failed for NIC %s (Friendly Name: %s). Reason: %s, Error Code: %s", Operation.ToString, NicName.ToString, NicFName.ToString, FailureReason.ToString, FailureCode.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
	NTSTATUS FailureCode;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_SAVE_RESTORE_FAILURE_VALUEMAP(this);
	UINT32 Ext1;
	UINT32 HeaderType;
	UINT32 HeaderRevision;
	UINT32 HeaderSize;
	GUID(true) ExtensionId;
	GUID(true) FeatureId;
	UINT32 SaveDataSize;
	UINT32 SaveDataSizeOverflow;
}
Struct VMSWITCH_VM_SWITCH_SAVE_RESTORE_EXTENSION_OPERATION_SUCCEEDED = FormatString("Switch Extension %s operation succeeded for NIC %s (Friendly Name: %s).", Operation.ToString, NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 Operation = VMSWITCH_VMSWITCH_OPERATION_VALUEMAP(this);
	NTSTATUS FailureCode;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_SAVE_RESTORE_FAILURE_VALUEMAP(this);
	UINT32 Ext1;
	UINT32 HeaderType;
	UINT32 HeaderRevision;
	UINT32 HeaderSize;
	GUID(true) ExtensionId;
	GUID(true) FeatureId;
	UINT32 SaveDataSize;
	UINT32 SaveDataSizeOverflow;
}
Struct VMSWITCH_VM_SET_MAC_VLAN_FILTER_FAILED = FormatString("Failed to set filter for VLAN ID %s on NIC %s (Friendly Name: %s). Reason - %s", VlanID.ToString, NicNameLen.ToString, NicName.ToString, NicFNameLen.ToString)
{
	UINT32 VlanID;
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	UINT32 FailReason = VMSWITCH_VMSWITCH_SET_FILTER_FAILED_REASON_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_SUCCEEDED = FormatString("VMQ is disabled on the external NIC %s (Friendly Name: %s). RSS was succesfully enabled.", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	NTSTATUS Status;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_NATIVE_RSS_FAILURE_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_FAILED = FormatString("VMQ is disabled on the external NIC %s (Friendly Name: %s). RSS could not be enabled. Reason: %s, Error Code: %s", NicName.ToString, NicFName.ToString, FailureReason.ToString, Status.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	NTSTATUS Status;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_NATIVE_RSS_FAILURE_VALUEMAP(this);
}
Struct VMSWITCH_VM_SWITCH_NATIVE_RSS_ENABLE_UNSUPPORTED = FormatString("Neither VMQ nor RSS are supported on the external NIC %s (Friendly Name: %s).", NicName.ToString, NicFName.ToString)
{
	UINT32 NicNameLen;
	UnicodeString(NicNameLen) NicName;
	UINT32 NicFNameLen;
	UnicodeString(NicFNameLen) NicFName;
	NTSTATUS Status;
	UINT32 FailureReason = VMSWITCH_VMSWITCH_NATIVE_RSS_FAILURE_VALUEMAP(this);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsHyperVVmSwitch_Keyword, "{67DC0D66-3695-47c0-9642-33F76F7BD7AD}")]
struct VMSWITCH_MicrosoftWindowsHyperVVmSwitch_Keyword
{
	UINT64 VmsConfiguration:1 = FormatString(" (%s) %s", this.ToBitString, this? "VMS_CONFIGURATION":"");
	UINT64 VmsDataPath:1 = FormatString("      (%s) %s", this.ToBitString, this? "VMS_DATA_PATH":"");
	UINT64 VmsOidStatus:1 = FormatString("     (%s) %s", this.ToBitString, this? "VMS_OID_STATUS":"");
	UINT64 VmsQos:1 = FormatString("           (%s) %s", this.ToBitString, this? "VMS_QOS":"");
	UINT64 VmsVmq:1 = FormatString("           (%s) %s", this.ToBitString, this? "VMS_VMQ":"");
	UINT64 VmsRss:1 = FormatString("           (%s) %s", this.ToBitString, this? "VMS_RSS":"");
	UINT64 VmsVerifier:1 = FormatString("      (%s) %s", this.ToBitString, this? "VMS_VERIFIER":"");
	UINT64 Reserved1:25 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
