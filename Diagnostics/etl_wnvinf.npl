//#  (c) 2009 Microsoft Corporation
//#
//#  Title:                  Microsoft-Windows-wnvinf
//#
//#  Details:                
//#
//#  Public References:      wnvinf.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 9/17/2013
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWnv, "{3ad15a04-74f1-4dca-b226-aff89085a05a}")]
Protocol WNV_MicrosoftWindowsWnv = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] WNV_WNV_CREATE_VIRTUAL_ROUTE_EVENT WNV_CREATE_VIRTUAL_ROUTE_EVENT;
		case 1002: [property.ETLSummary = this.ToString] WNV_WNV_DELETE_VIRTUAL_ROUTE_EVENT WNV_DELETE_VIRTUAL_ROUTE_EVENT;
		case 1003: [property.ETLSummary = this.ToString] WNV_WNV_MODIFY_VIRTUAL_ROUTE_EVENT WNV_MODIFY_VIRTUAL_ROUTE_EVENT;
		case 1004:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]WNV_WNV_CREATE_LOCATOR_ADDRESS_EVENT_V0 WNV_CREATE_LOCATOR_ADDRESS_EVENT_V0;
				case 1: [property.ETLSummary = this.ToString]WNV_WNV_CREATE_LOCATOR_ADDRESS_EVENT WNV_CREATE_LOCATOR_ADDRESS_EVENT;
			}
		case 1005:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]WNV_WNV_DELETE_LOCATOR_ADDRESS_EVENT_V0 WNV_DELETE_LOCATOR_ADDRESS_EVENT_V0;
				case 1: [property.ETLSummary = this.ToString]WNV_WNV_DELETE_LOCATOR_ADDRESS_EVENT WNV_DELETE_LOCATOR_ADDRESS_EVENT;
			}
		case 1006: [property.ETLSummary = this.ToString] WNV_WNV_CREATE_LOCATOR_RECORD_EVENT WNV_CREATE_LOCATOR_RECORD_EVENT;
		case 1007: [property.ETLSummary = this.ToString] WNV_WNV_DELETE_LOCATOR_RECORD_EVENT WNV_DELETE_LOCATOR_RECORD_EVENT;
		case 1008: [property.ETLSummary = this.ToString] WNV_WNV_MODIFY_LOCATOR_RECORD_EVENT WNV_MODIFY_LOCATOR_RECORD_EVENT;
		case 1009: [property.ETLSummary = this.ToString] WNV_WNV_REGISTER_NOTIFICATION_EVENT WNV_REGISTER_NOTIFICATION_EVENT;
		case 1010: [property.ETLSummary = this.ToString] WNV_WNV_PACKET_PROCESSING_LOOKUP_FAILURE_EVENT WNV_PACKET_PROCESSING_LOOKUP_FAILURE_EVENT;
		case 1011: [property.ETLSummary = this.ToString] WNV_WNV_PACKET_PROCESSING_LOOKUP_SUCCESS_EVENT WNV_PACKET_PROCESSING_LOOKUP_SUCCESS_EVENT;
		case 1012: [property.ETLSummary = this.ToString] WNV_WNV_PACKET_DROP_EVENT WNV_PACKET_DROP_EVENT;
		case 1013: [property.ETLSummary = this.ToString] WNV_WNV_IPSEC_OID_TRANSLATION WNV_IPSEC_OID_TRANSLATION;
		case 1014: [property.ETLSummary = this.ToString] WNV_WNV_IPSEC_OFFLOAD_FAILURE WNV_IPSEC_OFFLOAD_FAILURE;
		case 1015: [property.ETLSummary = this.ToString] WNV_WNV_IPSEC_UPLOAD_SA WNV_IPSEC_UPLOAD_SA;
		case 1016:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]WNV_WNV_MODIFY_LOCATOR_ADDRESS_EVENT_V0 WNV_MODIFY_LOCATOR_ADDRESS_EVENT_V0;
				case 1: [property.ETLSummary = this.ToString]WNV_WNV_MODIFY_LOCATOR_ADDRESS_EVENT WNV_MODIFY_LOCATOR_ADDRESS_EVENT;
			}
		case 1017: [property.ETLSummary = this.ToString] WNV_WNV_CREATE_PHYSICAL_ROUTE_EVENT WNV_CREATE_PHYSICAL_ROUTE_EVENT;
		case 1018: [property.ETLSummary = this.ToString] WNV_WNV_DELETE_PHYSICAL_ROUTE_EVENT WNV_DELETE_PHYSICAL_ROUTE_EVENT;
		case 1019: [property.ETLSummary = this.ToString] WNV_WNV_MODIFY_PHYSICAL_ROUTE_EVENT WNV_MODIFY_PHYSICAL_ROUTE_EVENT;
		case 1020: [property.ETLSummary = this.ToString] WNV_WNV_DYNAMIC_LOCATOR_RECORD_EVENT WNV_DYNAMIC_LOCATOR_RECORD_EVENT;
		case 1021: [property.ETLSummary = this.ToString] WNV_WNV_DYNAMIC_IP_ADDRESS_THROTTLED WNV_DYNAMIC_IP_ADDRESS_THROTTLED;
		case 1022: [property.ETLSummary = this.ToString] WNV_WNV_DYNAMIC_IP_ADDRESS_THRESHOLD WNV_DYNAMIC_IP_ADDRESS_THRESHOLD;
		case 1023: [property.ETLSummary = this.ToString] WNV_WNV_ADDRESS_RESOLUTION_PACKET WNV_ADDRESS_RESOLUTION_PACKET;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WNV_WNV_ADDRESS_FAMILY_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 2: "IPV4";
		case 23: "IPV6";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_IOCTL_CODE_ValueMap(value)
{
	switch(value)
	{
		case 1: "Add virtual route";
		case 2: "Delete virtual route";
		case 3: "Add locator record";
		case 4: "Enumerate locator records";
		case 5: "Modify locator record";
		case 6: "Delete locator record";
		case 7: "Add locator address";
		case 8: "Delete locator address";
		case 9: "Set global object";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "No failure";
		case 1: "Unknown address family";
		case 2: "Invalid prefix length";
		case 3: "Invalid configruation specified";
		case 4: "Invalid IP address type";
		case 5: "Invalid buffer size";
		case 6: "Invalid logical network";
		case 7: "Object modification parameters invalid";
		case 8: "Tenant ID is in the reserved range";
		case 9: "Invalid translation method";
		case 10: "Duplicate object";
		case 11: "Memory failure";
		case 12: "Not found";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_IPSEC_OFFLOAD_FAILURE_REASON_ValueMap(value)
{
	switch(value)
	{
		case 1: "AH present in offloaded SA";
		case 2: "Lookup failure";
		case 3: "Not unicast";
		case 4: "Encap policy";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_IPSEC_UPLOAD_SA_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "Mapping Change";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_TRANSLATION_METHOD_ValueMap(value)
{
	switch(value)
	{
		case 0: "NAT";
		case 1: "Encapsulation";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_NOTIFICATION_ValueMap(value)
{
	switch(value)
	{
		case 0: "Policy mismatch";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_PACKET_PROCESSING_LOOKUP_FAILURE_ValueMap(value)
{
	switch(value)
	{
		case 0: "Source locator record missing";
		case 1: "Destination locator record missing";
		case 2: "Virtual route missing";
		case 3: "Physical route missing";
		case 4: "Translation method mismatch";
		case 5: "Source CA:PA mismatch";
		case 6: "Destination CA:PA mismatch";
		case 7: "Source CA:Mac mismatch";
		case 8: "Destination CA:Mac mismatch";
		case 9: "Destination CA on-link";
		case 10: "Internal failure";
		case 11: "Destination not unicast";
		case 12: "UseExternalRouter first lookup";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_PACKET_DIRECTION_ValueMap(value)
{
	switch(value)
	{
		case 0: "Inbound";
		case 1: "Outbound";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_PACKET_DROP_REASON_ValueMap(value)
{
	switch(value)
	{
		case 1: "MTU exceeded";
		case 2: "No policy";
		case 3: "ARP/Neighbor discovery failed";
		case 4: "Unsupported ethernet frame type";
		case 5: "Malformed packet";
		case 6: "IP checksum invalid";
		case 7: "Internal error";
		case 8: "TTL/Hop limit expired while forwarding";
		case 9: "Ecn code point CE set on the outer header for a non-ECT inner packet";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_PACKET_FRAME_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 2054: "ARP";
		case 34525: "IPv6";
		case 2048: "IPv4";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_LOCATOR_RECORD_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "Static";
		case 1: "Dynamic";
		case 2: "GatewayWildcard";
		case 3: "L2Only";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_DYNAMIC_LOCATOR_RECORD_EVENT_ValueMap(value)
{
	switch(value)
	{
		case 0: "Notify Add";
		case 1: "Notify Delete";
		case 2: "Pre Movement";
		case 3: "Post Movement";
		case 4: "Marked Usable";
		case 5: "Marked Synchronized";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_ADDRESS_RESOLUTION_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "DAD";
		case 1: "GARP";
		case 2: "NUD";
		case 3: "DADOrNUDReply";
		case 4: "Normal";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WNV_WNV_PACKET_ACTION_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "Drop";
		case 1: "Unicast";
		case 2: "PassThrough";
		case 3: "IntraVsidBroadcast";
		case 4: "Respond";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WNV_WNV_CREATE_VIRTUAL_ROUTE_EVENT = FormatString("Virtual route create: Dest Prefix: %s/%s, Nexthop: %s, RoutingDomainId: %s, VirtualSubnetId: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, RoutingDomainId.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_DELETE_VIRTUAL_ROUTE_EVENT = FormatString("Virtual route delete: Dest Prefix: %s/%s, Nexthop: %s, RoutingDomainId: %s, VirtualSubnetId: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, RoutingDomainId.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_MODIFY_VIRTUAL_ROUTE_EVENT = FormatString("Virtual route modify: Dest Prefix: %s/%s, Nexthop: %s, RoutingDomainId: %s, VirtualSubnetId: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, RoutingDomainId.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_CREATE_LOCATOR_ADDRESS_EVENT_V0 = FormatString("Locator address create: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_CREATE_LOCATOR_ADDRESS_EVENT = FormatString("Locator address create: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s, PA MAC Address: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString, ProviderMacAddress.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	BLOB(6) ProviderMacAddress;
}
Struct WNV_WNV_DELETE_LOCATOR_ADDRESS_EVENT_V0 = FormatString("Locator address delete: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_DELETE_LOCATOR_ADDRESS_EVENT = FormatString("Locator address delete: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s, PA MAC Address: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString, ProviderMacAddress.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	BLOB(6) ProviderMacAddress;
}
Struct WNV_WNV_CREATE_LOCATOR_RECORD_EVENT = FormatString("Locator record create: CustomerIpAddress: %s, ProviderIpAddress: %s, VirtualSubnetId: %s, CustomerId: %s, CustomerMacAddress: %s, UseVmMACAddress: %s, Description: %s, TranslationMethod: %s, Failure Reason: %s, Status: %s, Type: %s", CustomerIpAddress.ToString, ProviderIpAddress.ToString, VirtualSubnetId.ToString, CustomerGuid.ToString, CustomerMacAddress.ToString, UseVmMACAddress.ToString, Description.ToString, TranslationMethod.ToString, Failurereason.ToString, Status.ToString, Type.ToString)
{
	AsciiString CustomerIpAddress;
	AsciiString ProviderIpAddress;
	UINT32 VirtualSubnetId;
	GUID(true) CustomerGuid;
	BLOB(6) CustomerMacAddress;
	BOOL UseVmMACAddress;
	UnicodeString Description;
	UINT32 TranslationMethod = WNV_WNV_TRANSLATION_METHOD_ValueMap(this);
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	UINT32 ModifyFlags;
	UINT32 Type = WNV_WNV_LOCATOR_RECORD_TYPE_ValueMap(this);
}
Struct WNV_WNV_DELETE_LOCATOR_RECORD_EVENT = FormatString("Locator record delete: CustomerIpAddress: %s, ProviderIpAddress: %s, VirtualSubnetId: %s, CustomerId: %s, CustomerMacAddress: %s, UseVmMACAddress: %s, Description: %s, TranslationMethod: %s, Failure Reason: %s, Status: %s, Type: %s", CustomerIpAddress.ToString, ProviderIpAddress.ToString, VirtualSubnetId.ToString, CustomerGuid.ToString, CustomerMacAddress.ToString, UseVmMACAddress.ToString, Description.ToString, TranslationMethod.ToString, Failurereason.ToString, Status.ToString, Type.ToString)
{
	AsciiString CustomerIpAddress;
	AsciiString ProviderIpAddress;
	UINT32 VirtualSubnetId;
	GUID(true) CustomerGuid;
	BLOB(6) CustomerMacAddress;
	BOOL UseVmMACAddress;
	UnicodeString Description;
	UINT32 TranslationMethod = WNV_WNV_TRANSLATION_METHOD_ValueMap(this);
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	UINT32 ModifyFlags;
	UINT32 Type = WNV_WNV_LOCATOR_RECORD_TYPE_ValueMap(this);
}
Struct WNV_WNV_MODIFY_LOCATOR_RECORD_EVENT = FormatString("Locator record modify: ModifyFlags: %s, CustomerIpAddress: %s, ProviderIpAddress: %s, VirtualSubnetId: %s, CustomerId: %s, CustomerMacAddress: %s, UseVmMACAddress: %s, Description: %s, TranslationMethod: %s, Failure Reason: %s, Status: %s, Type: %s", ModifyFlags.ToString, CustomerIpAddress.ToString, ProviderIpAddress.ToString, VirtualSubnetId.ToString, CustomerGuid.ToString, CustomerMacAddress.ToString, UseVmMACAddress.ToString, Description.ToString, TranslationMethod.ToString, Failurereason.ToString, Status.ToString, Type.ToString)
{
	AsciiString CustomerIpAddress;
	AsciiString ProviderIpAddress;
	UINT32 VirtualSubnetId;
	GUID(true) CustomerGuid;
	BLOB(6) CustomerMacAddress;
	BOOL UseVmMACAddress;
	UnicodeString Description;
	UINT32 TranslationMethod = WNV_WNV_TRANSLATION_METHOD_ValueMap(this);
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	UINT32 ModifyFlags;
	UINT32 Type = WNV_WNV_LOCATOR_RECORD_TYPE_ValueMap(this);
}
Struct WNV_WNV_REGISTER_NOTIFICATION_EVENT = FormatString("Register notification: Notification type: %s, Failure reason: %s, Status: %s", Notificationtype.ToString, Failurereason.ToString, Status.ToString)
{
	UINT32 Notificationtype = WNV_WNV_NOTIFICATION_ValueMap(this);
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_PACKET_PROCESSING_LOOKUP_FAILURE_EVENT = FormatString("%s packet processing lookup failure: Source IP in packet: %s, Destination IP in packet: %s, Source IP in record: %s, Destination IP in record: %s, VirtualSubnetId: %s, VirtualNexthopIpAddress: %s, ProviderNexthopIpAddress: %s, Failure Reason: %s, SourceCAMac: %s, DestinationCAMac: %s, Source MAC in record: %s, Destination MAC in record: %s, Outer source IP: %s, Outer destination IP: %s", Packetdirection.ToString, SourceIPinPacket.ToString, DestinationIPinPacket.ToString, SourceIPinRecord.ToString, DestinationIPinRecord.ToString, VirtualSubnetId.ToString, CustomerNextHopIpAddress.ToString, ProviderNextHopIpAddress.ToString, Lookupfailure.ToString, SourceCAMacAddress.ToString, DestinationCAMacAddress.ToString, SourceCAMacAddressinRecord.ToString, DestinationCAMacAddressinRecord.ToString, OuterSourceIP.ToString, OuterDestinationIP.ToString)
{
	AsciiString SourceIPinPacket;
	AsciiString DestinationIPinPacket;
	AsciiString SourceIPinRecord;
	AsciiString DestinationIPinRecord;
	AsciiString CustomerNextHopIpAddress;
	AsciiString ProviderNextHopIpAddress;
	UINT32 Lookupfailure = WNV_WNV_PACKET_PROCESSING_LOOKUP_FAILURE_ValueMap(this);
	UINT32 Packetdirection = WNV_WNV_PACKET_DIRECTION_ValueMap(this);
	BLOB(6) SourceCAMacAddress;
	BLOB(6) DestinationCAMacAddress;
	BLOB(6) SourceCAMacAddressinRecord;
	BLOB(6) DestinationCAMacAddressinRecord;
	AsciiString OuterSourceIP;
	AsciiString OuterDestinationIP;
	UINT32 VirtualSubnetId;
}
Struct WNV_WNV_PACKET_PROCESSING_LOOKUP_SUCCESS_EVENT = FormatString("%s packet processing lookup succeeded: Source IP in packet: %s, Destination IP in packet: %s, Source IP in record: %s, Destination IP in record: %s, VirtualSubnetId: %s, VirtualNexthopIpAddress: %s, ProviderNexthopIpAddress: %s, SourceCAMac: %s, DestinationCAMac: %s, Source MAC in record: %s, Destination MAC in record: %s, Outer source IP: %s, Outer destination IP: %s", Packetdirection.ToString, SourceIPinPacket.ToString, DestinationIPinPacket.ToString, SourceIPinRecord.ToString, DestinationIPinRecord.ToString, VirtualSubnetId.ToString, CustomerNextHopIpAddress.ToString, ProviderNextHopIpAddress.ToString, SourceCAMacAddress.ToString, DestinationCAMacAddress.ToString, SourceCAMacAddressinRecord.ToString, DestinationCAMacAddressinRecord.ToString, OuterSourceIP.ToString, OuterDestinationIP.ToString)
{
	AsciiString SourceIPinPacket;
	AsciiString DestinationIPinPacket;
	AsciiString SourceIPinRecord;
	AsciiString DestinationIPinRecord;
	AsciiString CustomerNextHopIpAddress;
	AsciiString ProviderNextHopIpAddress;
	UINT32 Lookupfailure = WNV_WNV_PACKET_PROCESSING_LOOKUP_FAILURE_ValueMap(this);
	UINT32 Packetdirection = WNV_WNV_PACKET_DIRECTION_ValueMap(this);
	BLOB(6) SourceCAMacAddress;
	BLOB(6) DestinationCAMacAddress;
	BLOB(6) SourceCAMacAddressinRecord;
	BLOB(6) DestinationCAMacAddressinRecord;
	AsciiString OuterSourceIP;
	AsciiString OuterDestinationIP;
	UINT32 VirtualSubnetId;
}
Struct WNV_WNV_PACKET_DROP_EVENT = FormatString("%s %s packet dropped: Inner source: %s, Inner destination: %s, Outer source: %s, Outer destination: %s, VirtualSubnetId: %s, Drop reason: %s, GreEncap: %s, Transport protocol: %s, Source MAC: %s, Destination MAC: %s ", Packetdirection.ToString, Frametype.ToString, SourceCA.ToString, DestinationCA.ToString, SourcePA.ToString, DestinationPA.ToString, VirtualSubnetId.ToString, Dropreason.ToString, GreEncap.ToString, TransportProtocol.ToString, SourceCAMacAddress.ToString, DestinationCAMacAddress.ToString)
{
	AsciiString SourceCA;
	AsciiString DestinationCA;
	AsciiString SourcePA;
	AsciiString DestinationPA;
	UINT32 Dropreason = WNV_WNV_PACKET_DROP_REASON_ValueMap(this);
	UINT32 Frametype = WNV_WNV_PACKET_FRAME_TYPE_ValueMap(this);
	UINT8 TransportProtocol;
	BLOB(6) SourceCAMacAddress;
	BLOB(6) DestinationCAMacAddress;
	UINT32 Packetdirection = WNV_WNV_PACKET_DIRECTION_ValueMap(this);
	UINT32 VirtualSubnetId;
	BOOL GreEncap;
}
Struct WNV_WNV_IPSEC_OID_TRANSLATION = FormatString("IPsec Add SA translation: Original source address: %s, Translated source address: %s, Original destination address: %s, Translated destination address: %s, SPI: %s", SourceAA.ToString, DestinationAA.ToString, SourcePA.ToString, DestinationPA.ToString, SPI.ToString)
{
	UnicodeString SourceAA;
	UnicodeString DestinationAA;
	UnicodeString SourcePA;
	UnicodeString DestinationPA;
	UINT32 SPI;
}
Struct WNV_WNV_IPSEC_OFFLOAD_FAILURE = FormatString("IPsec Offload SA Failed: Source address: %s, Destination address %s, Failure Reason: %s", SourceAA.ToString, DestinationAA.ToString, Failurereason.ToString)
{
	UnicodeString SourceAA;
	UnicodeString DestinationAA;
	UINT32 Failurereason = WNV_WNV_IPSEC_OFFLOAD_FAILURE_REASON_ValueMap(this);
}
Struct WNV_WNV_IPSEC_UPLOAD_SA = FormatString("Uploaded SA: Reason: %s", Reason.ToString)
{
	UINT32 Reason = WNV_WNV_IPSEC_UPLOAD_SA_REASON_ValueMap(this);
}
Struct WNV_WNV_MODIFY_LOCATOR_ADDRESS_EVENT_V0 = FormatString("Locator address modify: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_MODIFY_LOCATOR_ADDRESS_EVENT = FormatString("Locator address modify: Address: %s/%s, InterfaceLuid: %s, VlanId: %s, Failure Reason: %s, Status: %s, PA MAC Address: %s ", LocatorAddress.ToString, OnlinkPrefixLength.ToString, InterfaceLuid.ToString, VlanID.ToString, Failurereason.ToString, Status.ToString, ProviderMacAddress.ToString)
{
	AsciiString LocatorAddress;
	UINT32 OnlinkPrefixLength;
	UINT64 InterfaceLuid;
	UINT16 VlanID;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
	BLOB(6) ProviderMacAddress;
}
Struct WNV_WNV_CREATE_PHYSICAL_ROUTE_EVENT = FormatString("Physical route create: Dest Prefix: %s/%s, Nexthop: %s, Net LUID Index: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_DELETE_PHYSICAL_ROUTE_EVENT = FormatString("Physical route delete: Dest Prefix: %s/%s, Nexthop: %s, Net LUID Index: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_MODIFY_PHYSICAL_ROUTE_EVENT = FormatString("Physical route modify: Dest Prefix: %s/%s, Nexthop: %s, Net LUID Index: %s, Metric: %s, Failure Reason: %s, Status: %s ", DestinationPrefix.ToString, PrefixLength.ToString, NexthopAddress.ToString, VirtualSubnetId.ToString, Metric.ToString, Failurereason.ToString, Status.ToString)
{
	UnicodeString DestinationPrefix;
	UINT32 PrefixLength;
	UnicodeString NexthopAddress;
	GUID(true) RoutingDomainId;
	UINT32 VirtualSubnetId;
	UINT32 Metric;
	UINT32 Failurereason = WNV_WNV_CONFIG_VALIDATION_FAILURE_REASON_ValueMap(this);
	NTSTATUS Status;
}
Struct WNV_WNV_DYNAMIC_LOCATOR_RECORD_EVENT = FormatString("Dynamic locator record event type: %s. CustomerIpAddress: %s, VirtualSubnetId: %s, CustomerMacAddress: %s, ProviderIpAddress: %s, IsLocalCA: %s, InGatewayMode: %s, Unusable: %s, Unsynchronized: %s", EventType.ToString, CustomerIpAddress.ToString, VirtualSubnetId.ToString, CustomerMacAddress.ToString, ProviderIpAddress.ToString, IsLocalCA.ToString, InGatewayMode.ToString, Unusable.ToString, Unsynchronized.ToString)
{
	UINT32 EventType = WNV_WNV_DYNAMIC_LOCATOR_RECORD_EVENT_ValueMap(this);
	AsciiString CustomerIpAddress;
	UINT32 VirtualSubnetId;
	BLOB(6) CustomerMacAddress;
	AsciiString ProviderIpAddress;
	BOOL IsLocalCA;
	BOOL InGatewayMode;
	BOOL Unusable;
	BOOL Unsynchronized;
}
Struct WNV_WNV_DYNAMIC_IP_ADDRESS_THROTTLED = FormatString("Dynamic IP address throttled: CustomerIpAddress: %s, VirtualSubnetId: %s, CustomerMacAddress: %s, MaxDynamicIPAddressCount: %s, CurrentDynamicIPAddressCount: %s ", CustomerIpAddress.ToString, VirtualSubnetId.ToString, CustomerMacAddress.ToString, MaxDynamicIPAddressCount.ToString, CurrentDynamicIPAddressCount.ToString)
{
	AsciiString CustomerIpAddress;
	UINT32 VirtualSubnetId;
	BLOB(6) CustomerMacAddress;
	UINT32 MaxDynamicIPAddressCount;
	UINT32 CurrentDynamicIPAddressCount;
}
Struct WNV_WNV_DYNAMIC_IP_ADDRESS_THRESHOLD = FormatString("Dynamic IP addresses impending threshold: CustomerIpAddress: %s, VirtualSubnetId: %s, CustomerMacAddress: %s, MaxDynamicIPAddressCount: %s, CurrentDynamicIPAddressCount: %s ", CustomerIpAddress.ToString, VirtualSubnetId.ToString, CustomerMacAddress.ToString, MaxDynamicIPAddressCount.ToString, CurrentDynamicIPAddressCount.ToString)
{
	AsciiString CustomerIpAddress;
	UINT32 VirtualSubnetId;
	BLOB(6) CustomerMacAddress;
	UINT32 MaxDynamicIPAddressCount;
	UINT32 CurrentDynamicIPAddressCount;
}
Struct WNV_WNV_ADDRESS_RESOLUTION_PACKET = FormatString("%s Address resolution packet: Source: %s, Destination: %s, Target: %s, Type: %s, Action = %s, Source MAC: %s, VirtualSubnetID: %s, CA Space: %s ", Packetdirection.ToString, SourceAddress.ToString, DestinationAddress.ToString, TargetAddress.ToString, Packettype.ToString, Packetaction.ToString, SourceMacAddress.ToString, VirtualSubnetId.ToString, CASpace.ToString)
{
	AsciiString SourceAddress;
	AsciiString DestinationAddress;
	AsciiString TargetAddress;
	UINT32 Packettype = WNV_WNV_ADDRESS_RESOLUTION_TYPE_ValueMap(this);
	UINT32 Packetaction = WNV_WNV_PACKET_ACTION_TYPE_ValueMap(this);
	BLOB(6) SourceMacAddress;
	UINT32 VirtualSubnetId;
	BOOL CASpace;
	UINT32 Packetdirection = WNV_WNV_PACKET_DIRECTION_ValueMap(this);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWnv_Keyword, "{3ad15a04-74f1-4dca-b226-aff89085a05a}")]
struct WNV_MicrosoftWindowsWnv_Keyword
{
	UINT64 utConfig:1 = FormatString("                (%s) %s", this.ToBitString, this? "KW_WNV_CONFIGURATION":"");
	UINT64 utIPsecOffloadProcessing:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_WNV_IPSEC_OFFLOAD_PROCESSING":"");
	UINT64 utWnvPacketProcessing:1 = FormatString("   (%s) %s", this.ToBitString, this? "KW_WNV_PACKET_PROCESSING":"");
	UINT64 Reserved1:37 = FormatString("               (%s)", this.ToBitString);
	UINT64 utDropped:1 = FormatString("               (%s) %s", this.ToBitString, this? "KW_DROPPED": "");
	UINT64 Reserved2:23 = FormatString("               (%s)", this.ToBitString);
}
